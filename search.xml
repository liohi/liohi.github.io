<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hive+Hbase 的部署及使用</title>
    <url>/2023/04/24/Hive+Hbase%20%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>HBase 和 Hive 是 Hadoop 生态系统中常用的两个组件。HBase 是一个分布式的非关系型数据库，可以用来存储大量的结构化数据；Hive 是一个基于 Hadoop 的数据仓库工具，可以将结构化数据映射为一张数据库表，并提供类似 SQL 的查询语言。</p>
<h4 id="下载-HBase-和-Hive"><a href="#下载-HBase-和-Hive" class="headerlink" title="下载 HBase 和 Hive"></a>下载 HBase 和 Hive</h4><p>注意<code>Hadoop</code> 与 <code>Hbase</code> 和 <code>Hive</code> 的版本匹配问题，不然到后面会有意外惊喜，我的<code>Hadoop</code>是 3.3.4，如果和我一样后面直接复制我的命令即可，不一样你需要去搜一下你版本对应的<code>Hbase</code> 和<code>Hive</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Hive+Hbase%20%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.assets/version_hbase.png"
                      alt="version_hbase"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Hive+Hbase%20%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.assets/version_hive.png"
                      alt="version_hive"
                ></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /usr/local</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 下载</span></span></span><br><span class="line">wget https://mirrors.aliyun.com/apache/hbase/2.5.3/hbase-2.5.3-bin.tar.gz</span><br><span class="line">wget https://mirrors.aliyun.com/apache/hive/hive-3.1.2/apache-hive-3.1.2-bin.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 解压</span></span></span><br><span class="line">tar -zxvf hbase-2.5.3-bin.tar.gz</span><br><span class="line">tar -zxvf apache-hive-3.1.2-bin.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 改一下名字，并将 hive 移动到Hadoop目录下</span></span></span><br><span class="line">mv apache-hive-3.1.2-bin hadoop/hive</span><br><span class="line">mv hbase-2.5.3 hbase</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 修改权限</span></span></span><br><span class="line">sudo chmod -R 777 hbase hadoop/hive</span><br></pre></td></tr></table></figure></div>

<h4 id="配置-HBase"><a href="#配置-HBase" class="headerlink" title="配置 HBase"></a>配置 HBase</h4><p>配置环境变量（顺便把 Hive 的也配置了）</p>
<p><code>$ vi ~/.bashrc</code></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">## HBASE_HOME</span><br><span class="line">export HBASE_HOME=/usr/local/hbase</span><br><span class="line">export PATH=$PATH:$HBASE_HOME/bin</span><br><span class="line"></span><br><span class="line">## Hive_HOME</span><br><span class="line">export HIVE_HOME=/usr/local/hadoop/hive</span><br><span class="line">export CLASSPATH=.:$&#123;HIVE_HOME&#125;/lib:$CLASSPATH</span><br><span class="line">export PATH=$&#123;HIVE_HOME&#125;/bin:$&#123;HIVE_HOME&#125;/conf:$PATH</span><br></pre></td></tr></table></figure></div>

<p>生效</p>
<p><code>$ source ~/.bashrc</code></p>
<blockquote>
<p>Hadoop 和 HBase 之间需要进行配置，以便 HBase 可以使用 Hadoop 作为其底层存储和计算引擎</p>
</blockquote>
<ul>
<li><p>将 Hadoop 的 core-site.xml 和 hdfs-site.xml 配置文件复制到 HBase 的 conf 目录下：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">cp $HADOOP_HOME/etc/hadoop/core-site.xml $HBASE_HOME/conf/</span><br><span class="line">cp $HADOOP_HOME/etc/hadoop/hdfs-site.xml $HBASE_HOME/conf/</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编辑 HBase 的 hbase-site.xml 文件：</p>
<p><code>vi /usr/local/hbase/conf/hbase-site.xml</code></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>./tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.unsafe.stream.capability.enforce<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="验证是否启动"><a href="#验证是否启动" class="headerlink" title="验证是否启动"></a>验证是否启动</h5><ul>
<li><p>启动 Hadoop</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">su hadoop</span><br><span class="line"></span><br><span class="line">sudo service ssh start</span><br><span class="line"></span><br><span class="line">ssh localhost</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动 Hadoop</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">start-all.sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动 HBase</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">start-hbase.sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 查看一下</span></span></span><br><span class="line">jps</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Hive+Hbase%20%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.assets/image-20230420193259179.png"
                      alt="image-20230420193259179"
                ></p>
<p>浏览器访问 Web UI <code>localhost: 16010</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Hive+Hbase%20%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.assets/image-20230420193400869.png"
                      alt="image-20230420193400869"
                ></p>
<p>则启动成功</p>
</li>
</ul>
<h4 id="配置-Hive"><a href="#配置-Hive" class="headerlink" title="配置 Hive"></a>配置 Hive</h4><p>在将 Hive 与 HBase 集成时需要使用 MySQL 作为元数据存储。Hive 元数据存储在 RDBMS 中，因此需要一个关系型数据库来存储表和列等元数据信息。</p>
<h5 id="配置-mysql（安装好的跳过）"><a href="#配置-mysql（安装好的跳过）" class="headerlink" title="配置 mysql（安装好的跳过）"></a>配置 mysql（安装好的跳过）</h5><ul>
<li><p>安装 mysql 客户端和服务端</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>设置密码</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>登录</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mysql -u root -p</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 显示如下则成功</span></span></span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Hive+Hbase%20%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.assets/image-20230424102437018.png"
                      alt="image-20230424102437018"
                ></p>
</li>
</ul>
<h5 id="配置-Hive-1"><a href="#配置-Hive-1" class="headerlink" title="配置 Hive"></a>配置 Hive</h5><ul>
<li><p>在 Hadoop 集群中创建一个 Hive 元数据存储目录：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hdfs dfs -mkdir /hive</span><br><span class="line">$ hdfs dfs -mkdir /hive/metastore</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>进入 Hive 的 conf 目录</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/hadoop/hive</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 将 hive-env.sh.template 复制一份并命名为 hive-env.sh</span></span></span><br><span class="line">cp hive-env.sh.template hive-env.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 编辑hive-env.sh</span></span></span><br><span class="line">vi hive-env.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 加上下面配置</span></span></span><br><span class="line">HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export HIVE_CONF_DIR=/usr/local/hadoop/hive/conf</span><br><span class="line">export HIVE_AUX_JARS_PATH=/usr/local/hadoop/hive/lib</span><br></pre></td></tr></table></figure></div>

<ul>
<li>创建一个 hive-site.xml 文件并加上下面配置（<code>vi hive-site.xml</code>）</li>
</ul>
<blockquote>
<p>注意：MySQL5 用的驱动 url 是<code>com.mysql.jdbc.Driver</code>，MySQL6 以后用的是<code>com.mysql.cj.jdbc.Driver</code>。版本不匹配便会报驱动类已过时的错误，所以对应第二个 <code>property</code> 配置应匹配 MySQL 版本</p>
</blockquote>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/metastore?createDatabaseIfNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.local.scratchdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop/hive/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>hive 下创建一个 <code>warehouse</code> 和 <code>logs</code>文件夹</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/hive$  mkdir /usr/local/hadoop/hive/warehouse</span><br><span class="line">/hive$  mkdir -p logs</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>hive&#x2F;conf 对 hive-log4j2.properties 配置</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">/hive$ </span><span class="language-bash"> <span class="built_in">cd</span> conf</span></span><br><span class="line"><span class="meta prompt_">/conf$ </span><span class="language-bash"> <span class="built_in">mv</span> hive-log4j2.properties.template hive-log4j2.properties</span></span><br><span class="line"><span class="meta prompt_">/conf$ </span><span class="language-bash"> sudo vi hive-log4j2.properties</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 将第 24 行左右修改（vim 可以直接 :24 跳转到24行）</span></span></span><br><span class="line"></span><br><span class="line">property.hive.log.dir = /usr/local/hadoop/hive/logs</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>进入 hive&#x2F;lib 下面下载 <code>mysql-connector-java</code>的 jar 包，可使用下面命令</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-8.0.27.tar.gz</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 解压</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 将jar 包移动到 hive/lib 目录下，此处省略</span></span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>初始化 metastore 数据库：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">schematool -initSchema -dbType mysql -verbose</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动 metastore 服务</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">hive --service metastore</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><p>另开一个终端</p>
<ul>
<li><p>启动 hive</p>
<p><code>$ hive</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Hive+Hbase%20%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.assets/image-20230424120736490.png"
                      alt="image-20230424120736490"
                ></p>
</li>
<li><p>创建一个测试表进行测试</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test (id <span class="type">INT</span>, name STRING);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;test1&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;test2&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;test3&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Hive+Hbase%20%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.assets/image-20230424152756644.png"
                      alt="image-20230424152756644"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Hive+Hbase%20%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.assets/image-20230424152814130.png"
                      alt="image-20230424152814130"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Hive+Hbase%20%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.assets/image-20230424152823200.png"
                      alt="image-20230424152823200"
                ></p>
</li>
<li><p>退出</p>
<p>&gt; <code>exit</code></p>
</li>
<li><p>关闭服务</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">stop-hbase.sh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">stop-all.sh</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
<h6 id="至此，Hbase-Hive-配置完成"><a href="#至此，Hbase-Hive-配置完成" class="headerlink" title="至此，Hbase+Hive 配置完成"></a>至此，Hbase+Hive 配置完成</h6>]]></content>
      <categories>
        <category>笔记</category>
        <category>Linux</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 笔记</title>
    <url>/2023/06/03/C++/</url>
    <content><![CDATA[<h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> m_x;</span><br><span class="line">	<span class="type">int</span> m_y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Vector</span>(<span class="type">int</span> x,<span class="type">int</span> y) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_x = x;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_y = y;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 重载 +</span></span><br><span class="line">	Vector <span class="keyword">operator</span>+ (Vector&amp; other) <span class="type">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Vector&#123; m_x + other.m_x,m_y + other.m_y &#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="type">const</span> Vector&amp; other);	<span class="comment">// 由于重载 &lt;&lt; 函数位于Vector外，访问private 需要private</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载 &lt;&lt;</span></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os,<span class="type">const</span> Vector&amp; other) &#123;</span><br><span class="line"></span><br><span class="line">	os &lt;&lt; other.m_x &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; other.m_y &lt;&lt; std::endl;</span><br><span class="line">	<span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="function">Vector <span class="title">v1</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">	<span class="function">Vector <span class="title">v2</span><span class="params">(<span class="number">1</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">	std::cout &lt;&lt; v1 + v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>结果输出：<code>4  8</code></p>
<h2 id="模板template"><a href="#模板template" class="headerlink" title="模板template"></a>模板<code>template</code></h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="type">int</span> size&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Array</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	T array[size];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">getSize</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> size;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Array &lt; std:: string, <span class="number">5</span> &gt; a;</span><br><span class="line">	std::cout &lt;&lt; a.<span class="built_in">getSize</span>()&lt;&lt;std::endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>结果输出：<code>5</code></p>
<h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintValue</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Value:	&quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ForEach</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; values,<span class="type">void</span>(*Print)(<span class="type">int</span>))</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> value : values)</span><br><span class="line">		<span class="built_in">Print</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	std::vector&lt;<span class="type">int</span>&gt; values = &#123; <span class="number">1</span>,<span class="number">3</span>,<span class="number">41</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>&#125;;</span><br><span class="line">	<span class="built_in">ForEach</span>(values, PrintValue);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>结果输出：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Value:  1</span><br><span class="line">Value:  3</span><br><span class="line">Value:  41</span><br><span class="line">Value:  1</span><br><span class="line">Value:  3</span><br><span class="line">Value:  6</span><br></pre></td></tr></table></figure></div>

<h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a><code>lambda</code> 表达式</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ForEach</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; values,<span class="type">void</span>(*Print)(<span class="type">int</span>))</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> value : values)</span><br><span class="line">		<span class="built_in">Print</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	std::vector&lt;<span class="type">int</span>&gt; values = &#123; <span class="number">1</span>,<span class="number">3</span>,<span class="number">41</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>&#125;;</span><br><span class="line">	<span class="keyword">auto</span> it = std::<span class="built_in">find_if</span>(values.<span class="built_in">begin</span>(), values.<span class="built_in">end</span>(), [](<span class="type">int</span> value) &#123;<span class="keyword">return</span> value &gt; <span class="number">3</span>; &#125;);</span><br><span class="line">	std::cout &lt;&lt; *it &lt;&lt; std::endl;		<span class="comment">// 输出 41</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> lambda = [](<span class="type">int</span> value) &#123;std::cout &lt;&lt; <span class="string">&quot;Value:	&quot;</span> &lt;&lt; value &lt;&lt; std::endl; &#125;;	<span class="comment">//	lambda 表达式</span></span><br><span class="line">	<span class="built_in">ForEach</span>(values, lambda);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">	<span class="keyword">auto</span> lambda = [=](<span class="type">int</span> value) &#123;std::cout &lt;&lt; <span class="string">&quot;Value:	&quot;</span> &lt;&lt; a &lt;&lt; std::endl; &#125;;	<span class="comment">//	lambda 表达式 Capture:&quot;=&quot;</span></span><br><span class="line">	<span class="built_in">ForEach</span>(values, lambda);	<span class="comment">// 输出 5</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a><code>namespace</code></h2><p><code>namespace</code>存在原因：避免命名冲突，在不同的<code>context</code>中使用相同的符号</p>
<p><code>::</code>：名称操作符</p>
<h2 id="thread线程"><a href="#thread线程" class="headerlink" title="thread线程"></a><code>thread</code>线程</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> s_Finished = <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DoWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std::literals::chrono_literals;</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Start thread id is &quot;</span> &lt;&lt; std::this_thread::<span class="built_in">get_id</span>() &lt;&lt; std::endl; <span class="comment">//获取线程id</span></span><br><span class="line">	<span class="keyword">while</span> (!s_Finished)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;Working...\n&quot;</span>;</span><br><span class="line">		std::this_thread::<span class="built_in">sleep_for</span>(<span class="number">1</span>s);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="function">std::thread <span class="title">worker</span><span class="params">(DoWork)</span></span>;</span><br><span class="line"></span><br><span class="line">	std::cin.<span class="built_in">get</span>();</span><br><span class="line">	s_Finished = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	worker.<span class="built_in">join</span>();	<span class="comment">// 线程加入</span></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Finished..\n&quot;</span>;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Start thread id is &quot;</span> &lt;&lt; std::this_thread::<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="计时器-Chrono"><a href="#计时器-Chrono" class="headerlink" title="计时器 Chrono"></a>计时器 <code>Chrono</code></h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;chrono&gt;</span>	<span class="comment">// chrono 计时</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> std::literals::chrono_literals;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> start = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line"></span><br><span class="line">	std::this_thread::<span class="built_in">sleep_for</span>(<span class="number">1</span>s); <span class="comment">// 线程休眠 1s</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> end = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line"></span><br><span class="line">	std::chrono::duration&lt;<span class="type">float</span>&gt; duration = end - start;	<span class="comment">//   计算时间</span></span><br><span class="line">	std::cout &lt;&lt; duration.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出 ：<code>1.0026s</code></p>
<p>优化…</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;chrono&gt;</span>	<span class="comment">// chrono 计时</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Timer</span></span><br><span class="line">&#123;</span><br><span class="line">	std::chrono::time_point&lt;std::chrono::steady_clock&gt;start, end;</span><br><span class="line">	std::chrono::duration&lt;<span class="type">float</span>&gt;duration;</span><br><span class="line">	<span class="built_in">Timer</span>() &#123;</span><br><span class="line">		start = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Timer</span>() &#123;</span><br><span class="line">		end = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">		duration = end - start;</span><br><span class="line"></span><br><span class="line">		<span class="type">float</span> ms = duration.<span class="built_in">count</span>() * <span class="number">1000.0f</span>;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;Time took&quot;</span> &lt;&lt; ms &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Timer timer;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;hello&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">Function</span>();</span><br><span class="line"></span><br><span class="line">	std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">hello</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">hello</span><br><span class="line">Time took 53.99912ms</span><br></pre></td></tr></table></figure></div>

<h2 id="排序Sort"><a href="#排序Sort" class="headerlink" title="排序Sort()"></a>排序<code>Sort()</code></h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	std::vector&lt;<span class="type">int</span>&gt; values = &#123; <span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span> &#125;;</span><br><span class="line">	std::<span class="built_in">sort</span>(values.<span class="built_in">begin</span>(), values.<span class="built_in">end</span>(), [] (<span class="type">int</span> a,<span class="type">int</span> b) &#123;	<span class="comment">// lambda表达式</span></span><br><span class="line">		<span class="keyword">if</span> (a == <span class="number">1</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (b == <span class="number">1</span>)<span class="keyword">return</span> <span class="literal">true</span>;	<span class="comment">// 将 1 移到最后</span></span><br><span class="line">		<span class="keyword">return</span> a &lt; b;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> value : values)</span><br><span class="line">		std::cout &lt;&lt; value&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出</p>
<p><code>2 3 4 5 1</code></p>
<h2 id="移动语义"><a href="#移动语义" class="headerlink" title="移动语义"></a>移动语义</h2><p>移动语义相比于拷贝语义优势在于只用分配一次内存即可访问或者返回对象，减少开辟堆内存时间花销</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">String</span>() = <span class="keyword">default</span>;</span><br><span class="line">	<span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* string) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Create!\n&quot;</span>);</span><br><span class="line">		m_Size = <span class="built_in">strlen</span>(string);</span><br><span class="line">		m_Data = <span class="keyword">new</span> <span class="type">char</span>[m_Size];</span><br><span class="line">		<span class="built_in">memcpy</span>(m_Data, string, m_Size);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">String</span>(<span class="type">const</span> String&amp; other) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Copyed!\n&quot;</span>);</span><br><span class="line">		m_Size = other.m_Size;</span><br><span class="line">		m_Data = <span class="keyword">new</span> <span class="type">char</span>[m_Size];</span><br><span class="line">		<span class="built_in">memcpy</span>(m_Data, other.m_Data, m_Size);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">String</span>(String&amp;&amp; other) <span class="keyword">noexcept</span>&#123;	<span class="comment">// 移动构造函数</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Moved!\n&quot;</span>);</span><br><span class="line">		m_Size = other.m_Size;</span><br><span class="line">		m_Data = other.m_Data;</span><br><span class="line"></span><br><span class="line">		other.m_Size = <span class="number">0</span>;</span><br><span class="line">		other.m_Data = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~<span class="built_in">String</span>() &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Destroyed!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">delete</span> m_Data;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; m_Size; i++)</span><br><span class="line">			<span class="built_in">putchar</span>(m_Data[i]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">char</span>* m_Data;</span><br><span class="line">	<span class="type">uint32_t</span> m_Size;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Entity</span>(<span class="type">const</span> String&amp; name)</span><br><span class="line">		:<span class="built_in">m_name</span>(name) &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Entity</span>(String&amp;&amp; name)		<span class="comment">// 接收右值参数</span></span><br><span class="line">		:<span class="built_in">m_name</span>((String&amp;&amp;)name) &#123;	<span class="comment">// 显式声明name为右值传递 或者 :m_name(std::move(name)) 将左值转为右值</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">PrintName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		m_name.<span class="built_in">Print</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	String m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="function">Entity <span class="title">entity</span><span class="params">(<span class="string">&quot;Herrick&quot;</span>)</span></span>;	<span class="comment">// 传递右值参数</span></span><br><span class="line">	entity.<span class="built_in">PrintName</span>();</span><br><span class="line">	std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="std-move"><a href="#std-move" class="headerlink" title="std::move"></a>std::move</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">String</span>() = <span class="keyword">default</span>;</span><br><span class="line">	<span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* string) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Create!\n&quot;</span>);</span><br><span class="line">		m_Size = <span class="built_in">strlen</span>(string);</span><br><span class="line">		m_Data = <span class="keyword">new</span> <span class="type">char</span>[m_Size];</span><br><span class="line">		<span class="built_in">memcpy</span>(m_Data, string, m_Size);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	String&amp; <span class="keyword">operator</span>=(String &amp;&amp;other)<span class="keyword">noexcept</span>&#123;	<span class="comment">// 移动构造函数</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> != &amp;other) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Moved!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">delete</span> m_Data;</span><br><span class="line"></span><br><span class="line">			m_Size = other.m_Size;</span><br><span class="line">			m_Data = other.m_Data;</span><br><span class="line"></span><br><span class="line">			other.m_Size = <span class="number">0</span>;</span><br><span class="line">			other.m_Data = <span class="literal">nullptr</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~<span class="built_in">String</span>() &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Destroyed!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">delete</span> m_Data;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; m_Size; i++)</span><br><span class="line">			<span class="built_in">putchar</span>(m_Data[i]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">char</span>* m_Data;</span><br><span class="line">	<span class="type">size_t</span> m_Size;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	String apple = <span class="string">&quot;Apple&quot;</span>;</span><br><span class="line">	String dest;</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Apple：&quot;</span>;</span><br><span class="line">	apple.<span class="built_in">Print</span>();</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Dest:&quot;</span>;</span><br><span class="line">	dest.<span class="built_in">Print</span>();</span><br><span class="line"></span><br><span class="line">	dest = std::<span class="built_in">move</span>(apple);</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Apple：&quot;</span>;</span><br><span class="line">	apple.<span class="built_in">Print</span>();</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Dest:&quot;</span>;</span><br><span class="line">	dest.<span class="built_in">Print</span>();</span><br><span class="line"></span><br><span class="line">	std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Create!</span><br><span class="line">Apple：Apple</span><br><span class="line">Dest:</span><br><span class="line">Moved!</span><br><span class="line">Apple：</span><br><span class="line">Dest:Apple</span><br></pre></td></tr></table></figure></div>

<h2 id="Rule-of-Three"><a href="#Rule-of-Three" class="headerlink" title="Rule of Three"></a>Rule of Three</h2><p>C++三法则（Rule of Three）指的是在定义一个包含动态内存分配的类时，必须重载以下三个函数：</p>
<ol>
<li>拷贝构造函数（Copy Constructor）：用于将一个已存在的对象复制到新创建的对象中。</li>
<li>拷贝赋值操作符（Copy Assignment Operator）：用于将一个已存在的对象赋值给另一个已存在的对象。</li>
<li>析构函数（Destructor）：用于在对象被销毁时释放动态分配的内存。</li>
</ol>
<p>这三个函数的实现都要根据类中的成员变量进行深拷贝或移动操作，否则可能会引起内存泄漏或悬空指针等问题。</p>
<h2 id="Rule-of-Five"><a href="#Rule-of-Five" class="headerlink" title="Rule of Five"></a>Rule of Five</h2><p>C++五法则（Rule of Five）在 C++11 中增加了两个函数，即移动构造函数和移动赋值操作符：</p>
<ol>
<li>拷贝构造函数（Copy Constructor）：用于将一个已存在的对象复制到新创建的对象中。</li>
<li>拷贝赋值操作符（Copy Assignment Operator）：用于将一个已存在的对象赋值给另一个已存在的对象。</li>
<li>移动构造函数（Move Constructor）：用于将一个右值引用的对象移动到新创建的对象中，避免不必要的拷贝开销。</li>
<li>移动赋值操作符（Move Assignment Operator）：用于将一个右值引用的对象赋值给另一个已存在的对象，避免不必要的拷贝开销。</li>
<li>析构函数（Destructor）：用于在对象被销毁时释放动态分配的内存。</li>
</ol>
<p>这五个函数的实现都要根据类中的成员变量进行深拷贝或移动操作，同时避免引起内存泄漏或悬空指针等问题。</p>
<h2 id="顶层-Const-和-底层-Const"><a href="#顶层-Const-和-底层-Const" class="headerlink" title="顶层 Const 和 底层 Const"></a>顶层 <code>Const</code> 和 底层 <code>Const</code></h2><p><strong>概念：</strong></p>
<ul>
<li>顶层<code>Const</code> ，表示修饰的<strong>本身</strong>就是常量，指的是指针，通常 * 右边</li>
<li>底层<code>const</code>，表示修饰的变量所指的量是常量，指的是所指变量，通常 * 左边</li>
</ul>
<p><strong>例：</strong></p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;<span class="type">int</span>* <span class="type">const</span> b1 = &amp;a;        <span class="comment">//顶层const，b1本身是一个常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* b2 = &amp;a;       <span class="comment">//底层const，b2本身可变，所指的对象是常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> b3 = <span class="number">20</span>; 		   <span class="comment">//顶层const，b3是常量不可变</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> b4 = &amp;a;  <span class="comment">//前一个const为底层，后一个为顶层，b4不可变</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; b5 = a;		   <span class="comment">//用于声明引用变量，都是底层const</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>区分作用：</strong></p>
<ul>
<li>执行对象拷贝时有限制，常量的底层 <code>const</code> 不能赋值给非常量的底层 <code>const</code></li>
<li>使用命名的强制类型转换函数 <code>const_cast</code> 时，只能改变运算对象的底层 <code>const</code></li>
</ul>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a;<span class="type">int</span> <span class="type">const</span> a;<span class="type">const</span> <span class="type">int</span> *a;<span class="type">int</span> *<span class="type">const</span> a;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>int const a</code>和<code>const int a</code>均表示定义常量类型 a。</li>
<li><code>const int *a</code>，其中 a 为指向 int 型变量的指针，<code>const</code> 在 * 左侧，表示 a 指向不可变常量。(看成<code> const (*a)</code>，对引用加 <code>const</code> )</li>
<li><code>int *const a</code>，依旧是指针类型，表示 a 为指向整型数据的常指针。(看成 <code>const(a)</code>，对指针 <code>const</code>)</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax</title>
    <url>/2023/04/16/Ajax/</url>
    <content><![CDATA[<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p><code>HTTP（HyperText Transport Protocol）</code>协议，也就是超文本传输协议，详细规定了浏览器和万维网服务器之间相互通信的规则</p>
<h4 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h4><p>格式与参数</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">行	POST /s?ie=utf<span class="number">-8</span> HTTP/<span class="number">1.1</span></span><br><span class="line">头	HOST<span class="punctuation">:</span> herrick<span class="number">.3</span>vhost.net</span><br><span class="line">	 Cookie<span class="punctuation">:</span> name=herrick</span><br><span class="line">	 Content-type<span class="punctuation">:</span> application/x-www-form-urlencoded</span><br><span class="line">	 User-Agent<span class="punctuation">:</span> chorome<span class="number">-83</span></span><br><span class="line">空行</span><br><span class="line">体</span><br></pre></td></tr></table></figure></div>

<h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">行	HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">头	Content-Type<span class="punctuation">:</span> text/html;charset=utf<span class="number">-8</span></span><br><span class="line">	 Content-length<span class="punctuation">:</span> <span class="number">2048</span></span><br><span class="line">	 Content-encoding<span class="punctuation">:</span> gzip</span><br><span class="line">空行</span><br><span class="line">体	&lt;html&gt;</span><br><span class="line">		&lt;head&gt;</span><br><span class="line">		&lt;/head&gt;</span><br><span class="line">		&lt;body&gt;</span><br><span class="line">			&lt;h1&gt;标题&lt;/h1&gt;</span><br><span class="line">		&lt;/body&gt;</span><br><span class="line">	&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>404</li>
<li>403</li>
<li>401</li>
<li>500 ……</li>
</ul>
<h3 id="express-框架"><a href="#express-框架" class="headerlink" title="express 框架"></a>express 框架</h3><p><code>express</code>框架是一个简介而灵活的<code>node.js</code> <code>Web</code>应用框架，提供了一系列强大的特性创建各种 Web 应用和丰富的<code>HTTP</code>工具。</p>
<p>使用<code>express</code>框架可以快速搭建一个完整功能的网站，所以我们可以利用<code>express</code>模拟一个后端服务的环境</p>
<ul>
<li><p>首先在项目包里利用<code>npm</code>下载<code>express</code></p>
</li>
<li><pre><code>npm i express
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 创建一个`server.js`文件</span><br><span class="line"></span><br><span class="line">- ```javascript</span><br><span class="line">  //引入express</span><br><span class="line">  const &#123; response &#125; = require(&quot;express&quot;);</span><br><span class="line">  const express = require(&quot;express&quot;);</span><br><span class="line"></span><br><span class="line">  //创建应用对象</span><br><span class="line">  const app = express();</span><br><span class="line"></span><br><span class="line">  //创建路由规则</span><br><span class="line">  //request对请求报文封装</span><br><span class="line">  //respose对相应报文封装</span><br><span class="line">  app.get(&quot;/&quot;, (request, response) =&gt; &#123;</span><br><span class="line">    //设置响应</span><br><span class="line">    response.send(&quot;hello express&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  app.listen(8000, () =&gt; &#123;</span><br><span class="line">    console.log(&quot;服务已经启动,8000端口监听中....&quot;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></div>
</code></pre>
</li>
<li><p>然后<code>node server.js</code>,注意路径需要<code>cd</code>到当前包下</p>
</li>
</ul>
<p>此时服务已经启动，控制台显示<code>服务已经启动,8000端口监听中....</code>,网址输入<code>localhost:8000</code>能够看到<code>hello express</code></p>
<h3 id="原生-Ajax"><a href="#原生-Ajax" class="headerlink" title="原生 Ajax"></a>原生 Ajax</h3><p>创建两个文件，一个<code>HTML</code>和一个<code>server.js</code></p>
<p><code>server.js</code></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//.创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//.创建路由规则</span></span><br><span class="line"><span class="comment">//request对请求报文封装</span></span><br><span class="line"><span class="comment">//respose对相应报文封装</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/server&quot;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头，设置允许跨域</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">  <span class="comment">//设置响应体</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&quot;hello express&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//.监听端口启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动,8000端口监听中....&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<p><code>.html</code></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>AJAX GEt 请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 7]&gt;</span></span><br><span class="line"><span class="comment">      &lt;p class=&quot;browsehappy&quot;&gt;</span></span><br><span class="line"><span class="comment">        You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please</span></span><br><span class="line"><span class="comment">        &lt;a href=&quot;#&quot;&gt;upgrade your browser&lt;/a&gt; to improve your experience.</span></span><br><span class="line"><span class="comment">      &lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//获取button元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;button&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//绑定时间</span></span></span><br><span class="line"><span class="language-javascript">      btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.创建对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.初始化，设置请求方法和 url</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://localhost:8000/server&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3.发送</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//4.事件绑定 处理服务端返回的结果</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// on when 当……的时候</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//readystate 是 xhr 对象中的属性，表示状态0 1 2 3 4</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//change 改变</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//判断</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//判断响应状态码 200 404 403 401 500</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2** 成功</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//处理结果 行 头 空行 体</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//1.响应行</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">status</span>); <span class="comment">//状态码</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">statusText</span>); <span class="comment">//状态字符串</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="title function_">getAllResponseHeaders</span>()); <span class="comment">//所有响应头</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>); <span class="comment">//响应体</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">              result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#result</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: solid <span class="number">1px</span> black;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>实现效果如下：</p>
<p>点击发送请求会在显示框内打印出响应体，同时在控制台显示请求信息</p>
<p>以上就完成了一个简单的<code>GET</code>请求</p>
<p>接下来向服务端发起一个<code>POST</code>请求</p>
<p>满足需求是：当鼠标移到显示框的时候，显示框能显示到服务端发来的响应体</p>
<p>修改<code>HTML</code>文件</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 7]&gt;      &lt;html class=&quot;no-js lt-ie9 lt-ie8 lt-ie7&quot;&gt; &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 7]&gt;         &lt;html class=&quot;no-js lt-ie9 lt-ie8&quot;&gt; &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 8]&gt;         &lt;html class=&quot;no-js lt-ie9&quot;&gt; &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if gt IE 8]&gt;      &lt;html class=&quot;no-js&quot;&gt; &lt;!--&lt;![endif]--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">        AJAX GEt 请求</span><br><span class="line">    <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">        点击发送请求</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 7]&gt;</span></span><br><span class="line"><span class="comment">            &lt;p class=&quot;browsehappy&quot;&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href=&quot;#&quot;&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">        &lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        result.<span class="title function_">addEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;http://localhost:8000/server&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#result</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: solid <span class="number">1px</span> black;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>但是此时如果将鼠标移动到框内，控制台会报错<code>No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</code>因为服务段没有与之匹配的响应规则。此时服务端的规则还是上一小节的<code>GET</code>，所以需要向服务端<code>server.js</code>添加以下规则：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/server&quot;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头，设置允许跨域</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">  <span class="comment">//设置响应体</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&quot;hello express&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<p>重新启动服务<code> node server.js</code>,再次在<code>html</code>页面滑动鼠标到框内，显示响应体成功</p>
<h4 id="POST-请求设置参数"><a href="#POST-请求设置参数" class="headerlink" title="POST 请求设置参数"></a>POST 请求设置参数</h4><p><code>POST</code>请求设置参数，请求体是在<code>send()</code>里设置的，参数的形式任意，但是需要服务端能够处理</p>
<p>比如<code>xhr.send(&#39;a=100&amp;b=200&amp;c=300&#39;)</code>，或者可以<code>xhr.send(&#39;a:100&amp;b:200&amp;c:300&#39;)</code>,或者直接<code>xhr.send(&#39;12341414141&#39;)</code>，只要服务端能够处理就可</p>
<h3 id="Ajax-设置请求头信息"><a href="#Ajax-设置请求头信息" class="headerlink" title="Ajax 设置请求头信息"></a>Ajax 设置请求头信息</h3><p>设置请求信息，只需要在<code>open</code>()后面调用一个方法<code>setRequestHeader</code>例如</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  result.<span class="title function_">addEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;http://localhost:8000/server&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//其中Content-Type是设置请求体内容的类型，后面的内容是参数查询字符串的类型，固定写法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//比如可以自己设定一个头信息</span></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;herrick.3vhost&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="服务端响应json数据"><a href="#服务端响应json数据" class="headerlink" title="服务端响应json数据"></a>服务端响应<code>json</code>数据</h3><p>实际工作中服务端返回数据多数情况都是以<code>json</code>格式发送，那么返回的结果应该怎么处理很重要</p>
<p>首先向<code>server.js</code>添加下面代码<code>all</code>代表接收所有类型的请求</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">all</span>(<span class="string">&quot;/json-server&quot;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头，设置允许跨域</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">  <span class="comment">//设置响应体</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;herrick&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//由于send只能发送jsom或者bufferl类型，所以需要对字符串进行一个转换</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">  response.<span class="title function_">send</span>(str);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<p><code>html</code>文件<code>&lt;script&gt;</code>标签内容如下</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//绑定键盘按下时间</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//发送请求</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//初始化;</span></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://localhost:8000/json-server&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//发送</span></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//事件绑定</span></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>当键盘按下之后，就能接收到服务端传来的<code>json</code>数据</p>
<p>此时数据为一个<code>json</code>格式字符串，我们需要将其变成一个对象</p>
<p>可以手动转换</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">let data = JSON.parse(xhr.response); //然后就可以使用data里面的数据</span><br><span class="line">result.innerHTML = data.name;</span><br></pre></td></tr></table></figure></div>

<p>更推荐自动转换</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">xhr.responseType = &#x27;json&#x27; //然后就可以直接使用数据 result.innerHTML =</span><br><span class="line">xhr.response.name</span><br></pre></td></tr></table></figure></div>

<h3 id="nodemon-工具"><a href="#nodemon-工具" class="headerlink" title="nodemon 工具"></a><code>nodemon</code> 工具</h3><p>作用：自动检测文件改变重启服务</p>
<p>前提：<code>node.js</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g nodemon</span><br><span class="line">//再使用nodemon重启服务</span><br><span class="line">nodemon server.js</span><br><span class="line">//部分用户会出现错误&lt; nodemon : 无法加载文件XXX，因为在此系统上禁止运行脚本。&gt;原因是powershell权限不够</span><br><span class="line">//解决方法</span><br><span class="line">1. win+R输入powershell</span><br><span class="line">2. 输入start-proces s PowerShell -verb runas 进入管理员权限</span><br><span class="line">3. 管理员身份输入set-Exe cutionPolicy RemoteSigned 选择y</span><br><span class="line">4. 再次nodemon server.js 服务启动</span><br><span class="line"></span><br><span class="line">nodemon启动服务后修改服务端代码后就无需重启服务</span><br></pre></td></tr></table></figure></div>

<h3 id="Ajax-IE-缓存问题解决"><a href="#Ajax-IE-缓存问题解决" class="headerlink" title="Ajax-IE 缓存问题解决"></a>Ajax-IE 缓存问题解决</h3><p>问题描述：IE 浏览器会对 Ajax 的请求结果做一个缓存，导致再次发送请求时走的时本地缓存而不是服务器返回的数据，导致最新数据不能接收。</p>
<p>解决方案：修改<code>open()</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">xhr.open(&#x27;GET&#x27;, &#x27;http://localhost:8000/json-server?t=&#x27;+Date.now);</span><br><span class="line">// Date.now是一个时间戳，所以每次都会发送不同请求，浏览器就会判定为两次请求，也就解决了缓存问题</span><br></pre></td></tr></table></figure></div>

<h3 id="Ajax-请求超时和网络异常"><a href="#Ajax-请求超时和网络异常" class="headerlink" title="Ajax 请求超时和网络异常"></a>Ajax 请求超时和网络异常</h3><p>例如：请求两秒为超时</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//超时时间为2s</span><br><span class="line">xhr.timeout = 2000;</span><br><span class="line">//超时回调</span><br><span class="line">xhr.ontimeout = function()&#123;</span><br><span class="line">	alert(&quot;网络超时，请稍后重试！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//异常回调</span><br><span class="line">xhr.onerror = function()&#123;</span><br><span class="line">	alert(&quot;网络异常！&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Ajax-取消请求"><a href="#Ajax-取消请求" class="headerlink" title="Ajax 取消请求"></a>Ajax 取消请求</h3><p>调用<code>XMLHttpRequest</code>的<code>abort()</code></p>
<p>例如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//按下按键取消请求</span><br><span class="line">btn.onclick = function()&#123;</span><br><span class="line">	xhr.abort();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Ajax-重复发送请求"><a href="#Ajax-重复发送请求" class="headerlink" title="Ajax 重复发送请求"></a>Ajax 重复发送请求</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">let</span> isSending = <span class="literal">false</span>;	<span class="comment">//是否正在发送Ajax请求</span></span><br><span class="line">	btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isSending)x.<span class="title function_">abort</span>();	<span class="comment">//如果正在发送，则取消该请求，创建一个新的请求</span></span><br><span class="line">        x = <span class="keyword">new</span> <span class="title class_">XMLHttpRrequest</span>();</span><br><span class="line">        isSending = <span class="literal">true</span>;</span><br><span class="line">        x.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;http://localhost:8000&quot;</span>);</span><br><span class="line">        x.<span class="title function_">send</span>();</span><br><span class="line">        x.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">                isSending = <span class="literal">false</span>;	<span class="comment">//修改标识变量</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="Axios发送Ajax请求"><a href="#Axios发送Ajax请求" class="headerlink" title="Axios发送Ajax请求"></a><code>Axios</code>发送<code>Ajax</code>请求</h3><ul>
<li>首先配置<code>server.js</code></li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//axios 服务</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&quot;/axios-server&quot;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头，设置允许跨域</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">  <span class="comment">//设置响应体</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;herrick&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//由于send只能发送jsom或者bufferl类型，所以需要对字符串进行一个转换</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">  response.<span class="title function_">send</span>(str);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>HTML</code>引用<code>Axios</code>资源</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script</span><br><span class="line">  crossorigin=<span class="string">&quot;anonymous&quot;</span></span><br><span class="line">  src=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.1.3/axios.js&quot;</span></span><br><span class="line">&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a><code>GET</code>请求</h4></li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>); btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span></span><br><span class="line">  (<span class="params"></span>)&#123;<span class="string">&quot; &quot;</span>&#125;</span><br><span class="line">  &#123;axios.<span class="title function_">get</span>(<span class="string">&quot;http://localhost:8000/axios-server&quot;</span>, &#123;</span><br><span class="line">    <span class="comment">//url 参数</span></span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">vip</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p>此时控制台可以看到传递的参数</p>
<ul>
<li></li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>HDFS 文件读写</title>
    <url>/2023/04/15/HDFS%20%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</url>
    <content><![CDATA[<h4 id="启动-HDFS"><a href="#启动-HDFS" class="headerlink" title="启动 HDFS"></a>启动 HDFS</h4><ul>
<li><p>进入 hadoop 用户</p>
<p><code>su hadoop</code></p>
</li>
<li><p>启动 SSH 服务</p>
<p><code>sudo service ssh start</code></p>
</li>
<li><p>连接 localhost</p>
<p><code>ssh localhost</code></p>
</li>
<li><p>开启服务</p>
<p><code>start-all.sh</code></p>
</li>
<li><p>查看</p>
<p><code>jps</code></p>
<p>出现以下信息</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../my_imgs/hdfs1.png"
                      alt="hdfs1"
                ></p>
<p>表示启动成功</p>
</li>
</ul>
<h4 id="准备测试文件"><a href="#准备测试文件" class="headerlink" title="准备测试文件"></a>准备测试文件</h4><p>创建一个工作文件夹</p>
<p><code>$ sudo mkdir /usr/local/hadoop/hadoop-demo</code></p>
<p>进入工作文件夹</p>
<p><code>$ cd /usr/local/hadoop/hadoop-demo</code></p>
<p>创建一个测试文件 testfile，大小 1G</p>
<p><code>$ dd if=/dev/zero of=testfile bs=1M count=1024</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../my_imgs/hdfs2.png"
                      alt="hdfs2"
                ></p>
<h4 id="HDFS-读文件"><a href="#HDFS-读文件" class="headerlink" title="HDFS 读文件"></a>HDFS 读文件</h4><ul>
<li><p>进入 hadoop 目录</p>
<p><code>$ cd /usr/local/hadoop</code></p>
</li>
<li><p>创建 hadoop 工作文件夹</p>
<p><code>hadoop fs -mkdir /test1</code></p>
</li>
<li><p>获取 hadoop 集群报告</p>
<p><code>$ hdfs dfsadmin -report</code></p>
</li>
<li><p>上传本地文件（读）</p>
<p><code>$./bin/hdfs dfs -put /usr/local/hadoop/hadoop-demo/testfile /test1</code></p>
</li>
<li><p>查看</p>
<p><code>$  hadoop fs -ls /test1</code></p>
</li>
</ul>
<h4 id="HDFS-写文件"><a href="#HDFS-写文件" class="headerlink" title="HDFS 写文件"></a>HDFS 写文件</h4><ul>
<li><p>本地创建一个输出文件夹</p>
<p><code>$ sudo mkdir /usr/local/hadoop/hadoop-demo/out</code></p>
</li>
<li><p>写入文件</p>
<p><code>$ ./bin/hdfs dfs -get /test1/testfile /usr/local/hadoop/hadoop-demo/out</code></p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../my_imgs/hdfs3.png"
                      alt="hdfs3"
                ></p>
<p>最终将<code>testfile</code>写入<code>/out</code>文件夹</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../my_imgs/hdfs4.png"
                      alt="hdfs4"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../my_imgs/hdfs5.png"
                      alt="hdfs5"
                ></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>Linux</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 单机配置 Hadoop 环境</title>
    <url>/2023/04/16/Ubuntu%20%E5%8D%95%E6%9C%BA%E9%85%8D%E7%BD%AE%20Hadoop/</url>
    <content><![CDATA[<ul>
<li><p>创建<code>Hadoop</code>用户</p>
<p><code> sudo useradd -m hadoop -s /bin/bash</code></p>
</li>
<li><p>设置<code>Hadoop</code>密码</p>
<p><code>sudo passwd hadoop</code></p>
</li>
<li><p>为<code>Hadoop</code>用户增加管理员权限</p>
<p><code>sudo adduser hadoop sudo</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../my_imgs/hadoop1.png"
                      alt="hadoop1"
                ></p>
</li>
<li><h3 id="安装配置SSH"><a href="#安装配置SSH" class="headerlink" title="安装配置SSH"></a>安装配置<code>SSH</code></h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install ssh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">su hadoop</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-keygen -t rsa -P <span class="string">&quot;&quot;</span></span></span><br><span class="line"></span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></div>

<p>接下来运行 ssh 命令,测试一下是否成功.</p>
<p><code>$ ssh localhost</code></p>
</li>
<li><h3 id="配置java环境"><a href="#配置java环境" class="headerlink" title="配置java环境"></a>配置<code>java</code>环境</h3></li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get update</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install default-jdk</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><h3 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装<code>hadoop</code></h3><ul>
<li>下载 hadoop</li>
</ul>
<p>清华镜像源：<a class="link"   href="https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/" >https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><code>wget https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-3.3.4/hadoop-3.3.4.tar.gz </code></p>
<ul>
<li><p>配置环境变量</p>
<p>将<code>Hadoop</code>文件解压并移动到 <code>/usr/local/hadoop</code> 文件夹下</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf hadoop-3.3.4.tar.gz</span><br><span class="line">sudo mv hadoop-3.3.4 /usr/local/hadoop</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在<code>terminal</code>中输入 <code>sudo vi ~/.bashrc</code> ，按 <strong>i</strong> 进入编辑模式：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">export HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export HADOOP_INSTALL=$HADOOP_HOME</span><br><span class="line">export HADOOP_MAPRED_HOME=$HADOOP_HOME</span><br><span class="line">export HADOOP_COMMON_HOME=$HADOOP_HOME</span><br><span class="line">export HADOOP_HDFS_HOME=$HADOOP_HOME</span><br><span class="line">export YARN_HOME=$HADOOP_HOME</span><br><span class="line">export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin</span><br><span class="line">export HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_HOME/lib/native&quot;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../my_imgs/hadoop2.png"
                      alt="hadoop2"
                ></p>
</li>
<li><h3 id="修改Hadoop配置文件"><a href="#修改Hadoop配置文件" class="headerlink" title="修改Hadoop配置文件"></a>修改<code>Hadoop</code>配置文件</h3><p>打开 <code>/usr/local/hadoop/etc/hadoop/</code> 文件夹：</p>
<ul>
<li><p>配置 <code>hadoop-env.sh</code> 文件</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显式声明java路径</span></span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置<code>~/.bashrc</code></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">#<span class="variable constant_">HADOOP</span> <span class="variable constant_">VARIABLES</span> <span class="variable constant_">START</span></span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">JAVA_HOME</span>=<span class="regexp">/usr/</span>lib/jvm/java</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">HADOOP_INSTALL</span>=<span class="regexp">/usr/</span>local/hadoop</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">PATH</span>=<span class="attr">$PATH</span>:$HADOOP_INSTALL/bin</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">PATH</span>=<span class="attr">$PATH</span>:$HADOOP_INSTALL/sbin</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">HADOOP_MAPRED_HOME</span>=$HADOOP_INSTALL</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">HADOOP_COMMON_HOME</span>=$HADOOP_INSTALL</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">HADOOP_HDFS_HOME</span>=$HADOOP_INSTALL</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">YARN_HOME</span>=$HADOOP_INSTALL</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">HADOOP_COMMON_LIB_NATIVE_DIR</span>=$HADOOP_INSTALL/lib/native</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">HADOOP_OPTS</span>=<span class="string">&quot;-Djava.library.path=$HADOOP_INSTALL/lib/native&quot;</span></span><br><span class="line">#<span class="variable constant_">HADOOP</span> <span class="variable constant_">VARIABLES</span> <span class="variable constant_">END</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置 <code>core-site.xml</code> 文件</p>
<p>在修改这个文件之前，我们需要使用超级用户创建一个目录，并给予<code>hadoop</code>该目录的权限：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">mkdir</span> -p /app/hadoop/tmp</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">chown</span> hadoop:hadoop /app/hadoop/tmp</span></span><br></pre></td></tr></table></figure></div>

<p>接下来切换回<code>hadoop</code>用户，修改配置文件，文件路径：<code>/usr/local/hadoop/etc/hadoop/core-site.xml</code>，使用 VI，将配置改为：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/app/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>A base for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:54310<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>The name of the default file system.  A URI whose</span><br><span class="line">  scheme and authority determine the FileSystem implementation.  The</span><br><span class="line">  uri&#x27;s scheme determines the config property (fs.SCHEME.impl) naming</span><br><span class="line">  the FileSystem implementation class.  The uri&#x27;s authority is used to</span><br><span class="line">  determine the host, port, etc. for a filesystem.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改<code>mapred-site.xml</code></p>
<p><code>vi  /usr/local/hadoop/etc/hadoop/mapred-site.xml</code></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.job.tracker<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost:54311<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>The host and port that the MapReduce job tracker runs</span><br><span class="line">  at.  If &quot;local&quot;, then jobs are run in-process as a single map</span><br><span class="line">  and reduce task.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改<code>hdfs-site.xml</code></p>
<p>在修改之前，需要切换回超级管理员账户，创建需要用到的目录</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">mkdir</span> -p /usr/local/hadoop_store/hdfs/namenode</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">mkdir</span> -p /usr/local/hadoop_store/hdfs/datanode</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">chown</span> -R hduser:hadoop /usr/local/hadoop_store</span></span><br></pre></td></tr></table></figure></div>

<p>然后切换回来<code>hadoop</code>用户，修改配置文件：<code>/usr/local/hadoop/etc/hadoop/hdfs-site.xml</code>，改为：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">  &lt;description&gt;Default block replication.</span><br><span class="line">  The actual number of replications can be specified when the file is created.</span><br><span class="line">  The default is used if replication is not specified in create time.</span><br><span class="line">  &lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">   &lt;value&gt;file:/usr/local/hadoop_store/hdfs/namenode&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">   &lt;value&gt;file:/usr/local/hadoop_store/hdfs/datanode&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>格式化<code>HDFS</code></p>
<p><code>hadoop namenode –format</code></p>
</li>
</ul>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../my_imgs/hadoop3.png"
                      alt="hadoop3"
                ></p>
<ul>
<li><p>启动<code>Hadoop</code></p>
<p>设置无密码登录</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line"></span><br><span class="line">chmod 755 ~/.ssh</span><br><span class="line"></span><br><span class="line">cd ~/.ssh</span><br><span class="line"></span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure></div>

<p>连接本地</p>
<p><code>ssh localhost</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../my_imgs/hadoop4.png"
                      alt="hadoop4"
                ></p>
<p>启动：</p>
<p><code> start-all.sh</code></p>
<p>查看服务：</p>
<p><code>jps</code></p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../my_imgs/hadoop5.png"
                      alt="hadoop5"
                ></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>Linux</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MapReduce 基础操作</title>
    <url>/2023/04/20/MapReduce%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h6 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h6><p><code>MapReduce</code>是一种分布式计算框架，用于处理大规模数据集的计算问题。它是由 Google 公司开发的，旨在简化并行计算的开发。</p>
<p>在<code>MapReduce</code>中，计算问题被分解成两个阶段：映射（<code>Map</code>）和归约（<code>Reduce</code>）。映射阶段将输入数据划分成小的数据块，并将每个数据块映射到一组键值对。然后，这些键值对被传递给归约阶段，归约阶段对键值对进行分组，并对每组执行归约操作，生成最终结果。</p>
<p><code>MapReduce</code>的优点是它可以在大规模计算集群上高效地并行运行，而无需开发人员关心底层的并发细节。这使得开发人员可以更专注于算法设计和问题解决，而不是处理并发和分布式系统的复杂性。</p>
<h5 id="前提：确保配置好-Hadoop-环境"><a href="#前提：确保配置好-Hadoop-环境" class="headerlink" title="前提：确保配置好 Hadoop 环境"></a>前提：确保配置好 Hadoop 环境</h5><p>其中 MapReduce 对应 <code>&lt;HADOOP_HOME&gt;/etc/hadoop/mapred_site.xml</code>配置文件：</p>
<p>（我的<code>HADOOP_HOME</code>是<code>/usr/local/hadoop</code>则对应）</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mapred_site.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><ul>
<li><p>进入 Hadoop 用户（取决于个人配置，没添加用户就不用）</p>
<p><code>$ su hadoop</code></p>
</li>
<li><p>启动 ssh</p>
<p><code>$ sudo service ssh start</code></p>
</li>
<li><p>链接本地服务</p>
<p><code>$ ssh localhost</code></p>
</li>
<li><p>启动服务</p>
<p><code>$ start-all.sh</code></p>
</li>
<li><p>jps 查看，显示如下则启动成功</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Map%20Reduce%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE.assets/image-20230419161304679.png"
                      alt="image-20230419161304679"
                ></p>
</li>
</ul>
<h4 id="编写-WordCount-java"><a href="#编写-WordCount-java" class="headerlink" title="编写 WordCount.java"></a>编写 WordCount.java</h4><ul>
<li><p>创建工作文件夹</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /usr/local/hadoop</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">mkdir</span> hadoop-demo</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">chmod</span> -R 777 hadoop-demo <span class="comment"># 修改权限</span></span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写 <code>WordCount.java</code></p>
<p><code>$ vi WordCOunt.java</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordCount</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TokenizerMapper</span></span><br><span class="line">            <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, IntWritable&gt;&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">IntWritable</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="type">Text</span> <span class="variable">word</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Context context</span></span><br><span class="line"><span class="params">        )</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="type">StringTokenizer</span> <span class="variable">itr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(value.toString());</span><br><span class="line">            <span class="keyword">while</span> (itr.hasMoreTokens()) &#123;</span><br><span class="line">                word.set(itr.nextToken());</span><br><span class="line">                context.write(word, one);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IntSumReducer</span></span><br><span class="line">            <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text,IntWritable,Text,IntWritable&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">IntWritable</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values,</span></span><br><span class="line"><span class="params">                           Context context</span></span><br><span class="line"><span class="params">        )</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (IntWritable val : values) &#123;</span><br><span class="line">                sum += val.get();</span><br><span class="line">            &#125;</span><br><span class="line">            result.set(sum);</span><br><span class="line">            context.write(key, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;word count&quot;</span>);</span><br><span class="line">        job.setJarByClass(WordCount.class);</span><br><span class="line">        job.setMapperClass(TokenizerMapper.class);</span><br><span class="line">        job.setCombinerClass(IntSumReducer.class);</span><br><span class="line">        job.setReducerClass(IntSumReducer.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]));</span><br><span class="line">        System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="打包成-JAR-文件"><a href="#打包成-JAR-文件" class="headerlink" title="打包成 JAR 文件"></a>打包成 JAR 文件</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">/hadoop-demo</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> classes</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">javac -classpath <span class="variable">$&#123;HADOOP_CLASSPATH&#125;</span> -d classes WordCount.java</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">jar -cvf wordcount.jar -C classes/ .</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>若出现 <code>error: package org.apache.hadoop.conf does not exist</code>等错误可能是 <code>Hadoop</code>环境变量没配好</p>
<p>解决：</p>
<ul>
<li><p><code>sudo vi ~/.bashrc</code></p>
</li>
<li><p>添加以下行</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># HADOOP_HOME</span></span></span><br><span class="line">export HADOOP_HOME=/path/to/hadoop</span><br><span class="line">export HADOOP_CLASSPATH=$($HADOOP_HOME/bin/hadoop classpath)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>source ~/.bashrc</code></p>
</li>
</ul>
</blockquote>
<h4 id="创建测试文件并运行"><a href="#创建测试文件并运行" class="headerlink" title="创建测试文件并运行"></a>创建测试文件并运行</h4><ul>
<li><p>创建一个&#96;input.txt&#96;&#96;</p>
<p><code>vi input.txt</code></p>
</li>
<li><p>随便写点东西…（推荐写几个重复的单词，空格分开，这样结果更直观）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">bulabulabula 不啦不啦</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>将 input.txt 上传到 HDFS 文件系统 (HDFS 文件读写搜索历史文章有介绍)</p>
<p><code>$ hdfs dfs -put input.txt /test1</code></p>
</li>
<li><p>提交 MapReduce 作业</p>
<p><code>$ hadoop jar wordcount.jar WordCount /test1 /output</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Map%20Reduce%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE.assets/image-20230420111459501.png"
                      alt="image-20230420111459501"
                ></p>
</li>
<li><p>将 output 从 HDFS 系统提取出来</p>
<p><code> hdfs dfs -get /output out</code></p>
</li>
<li><p>查看一下</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> out</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 可以看到_SUCCESS 和part_r_00000</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vi part_r_00000</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Map%20Reduce%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE.assets/image-20230420121625841.png"
                      alt="image-20230420121625841"
                ></p>
<p>两个单词分别 1 个(当然在测试文件里可以创建几个重复的单词更直观)</p>
</li>
</ul>
<h6 id="Over"><a href="#Over" class="headerlink" title="Over!"></a>Over!</h6>]]></content>
      <categories>
        <category>笔记</category>
        <category>Linux</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 学习笔记</title>
    <url>/2023/04/16/javascript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 一个script标签就是一个代码段--&gt;</span><br><span class="line">&lt;!-- 每一个代码段之间相互独立，如果上面代码段报错，不会影响下面代码段--&gt;</span><br><span class="line"><span class="comment">//第一个代码段</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> a=<span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//输出a;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//使用了未声明的变量，报错 c is not defined</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">//报错</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//ReferenceError 引用错误</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//对于引用错误来说，统统一个代码段如果报了引用错误，错误下面代码就停止执行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个代码段</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> b=<span class="number">2</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//上面代码段定义的数据，下面代码段也可以使用，但是下面代码段定义数据不可以在上面使用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="预编译（预解析）"><a href="#预编译（预解析）" class="headerlink" title="预编译（预解析）"></a>预编译（预解析）</h3><p>JS 代码在执行时可分为两个阶段</p>
<ol>
<li>预编译（预解析）</li>
<li>代码执行，即一行一行执行，等到解析结束之后，才会尽心那个代码执行，也就是说浏览器把 JS 代码进行加工之后再去执行，加工的过程就是预编译</li>
</ol>
<p>预编译期间做了什么？</p>
<ol>
<li>声明提升：<code>var</code>变量提升，但是之提升了声明没有赋值。<code>function</code>函数整体提升。提升到代码段最前面</li>
<li>如果在函数内部的局部变量，就提升但函数内部的最前面</li>
</ol>
<blockquote>
<p><strong>ps：var 变量只提升声明，函数提升的是函数整体</strong></p>
</blockquote>
<h3 id="代码执行产生-EC-和-GO"><a href="#代码执行产生-EC-和-GO" class="headerlink" title="代码执行产生 EC 和 GO"></a>代码执行产生 EC 和 GO</h3><p>JS 在内存中主要看内存的栈区和堆区，其中基本数据类型存储在栈区，引用数据类型（函数）存储在堆区，地址存储在栈区</p>
<p>JS 代码主要分两类</p>
<p>全局代码：默认进入<code>script</code>标签就会执行全局代码</p>
<p>函数代码：一个函数就是一个局部函数代码</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//a和b位于全局代码</span></span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> b=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//c和d位于局部代码</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> c=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">var</span> d=<span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>全局代码执行时，会产生全局执行上下文<code>Execution Context Globle(ECG)</code></li>
<li>每调用函数时就产生一个局部的执行上下文</li>
<li>执行上下文产生即放入一个栈空间：执行上下文栈<code>Execution Context Stack(ECS)</code></li>
<li>当函数调用完毕，函数的<code>EC</code>出栈，当<code>ECG</code>执行完毕，<code>ECG</code>也要出栈</li>
</ul>
<p>执行上下文<code>EC</code>的作用：给代码提供数据，代码中需要的数据都从<code>EC</code>中的栈中读取</p>
<p>JS 代码在执行时。会在堆内存中创建一个全局对象<code>Global Object(GO)</code>，这个<code>GO</code>也就是<code>Window</code>，是一个全局对象，对象也就是属性的无序集合。很多<code>API</code>都是<code>Window</code>的属性，例如：<code>Date,Array,String,Number,SetTimeout...</code></p>
<ul>
<li><p>执行全局代码时会在<code>ECS</code>中产生<code>ECG</code> ，在堆内存则会有一个<code>GO(Window)</code></p>
</li>
<li><p>代码执行前<code>ECG</code>中包含两个部分：</p>
<ul>
<li>变量对象<code>VO</code>（此时就等同于<code>GO</code>）</li>
<li>全局代码执行</li>
</ul>
</li>
<li><p>调用函数<code>fn()</code>时，产生一个<code>EC(fn)</code>入栈，包含三个部分</p>
<ul>
<li><p>解析函数称为<code>AST</code>树结构时，会创建一个活动对象<code>Activation Object(AO)</code>,<code>AO</code>中包含形参、arguments、函数定义和指向函数对象、定义的变量</p>
</li>
<li><p>作用域链<code>scopchain</code>：由<code>VO</code>（在函数中就是<code>AO</code>的对象）和父级<code>VO</code>组成，查找时会逐层查找。ps：所谓作用域链就是数据在<code>EC</code>中查找的过程，找一个数据，先在自己的<code>EC</code>中找，如果找不到就去父的<code>EC</code>中找，直到<code>ECG</code>，如果还找不到就报错。</p>
</li>
<li><p><code>this</code>绑定的值</p>
</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">//代码执行前存在GO：包含内置属性和自定义的全局变量和全局函数 var n=1;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n); <span class="comment">//去执行上下文（ECG）中寻找n，ECG中有VO，也就是GO，GO中有n</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">n</span>); <span class="comment">//直接去GO中找n m=2; console.log(m);</span></span><br><span class="line">  <span class="comment">//ECG中找m，GO中有m console.log(x); //ECG中找不到x，x is not define</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">name</span>(name); <span class="comment">//虽然没有自定义name变量，但是GO中内置属性有name</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="再来个栗子"><a href="#再来个栗子" class="headerlink" title="再来个栗子"></a>再来个栗子</h4><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//代码执行产生ECS</span></span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">1</span>;	<span class="comment">//全局代码执行产生ECG,ECG里有VO，也就是GO，a存入到栈区</span></span><br><span class="line">	<span class="keyword">var</span> b=<span class="number">2</span>;	<span class="comment">//b和a同样存入到栈区</span></span><br><span class="line"></span><br><span class="line">	funtion <span class="title function_">fn</span>(<span class="params"></span>)&#123;	<span class="comment">//fn函数体存在堆区，函数地址存在栈区</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> arr=[<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>];	<span class="comment">//数组与函数类似，地址存在栈区，数组体存在堆区</span></span><br><span class="line">	<span class="keyword">var</span> obj=&#123;<span class="attr">name</span>:<span class="string">&quot;老八&quot;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="变量和闭包"><a href="#变量和闭包" class="headerlink" title="变量和闭包"></a><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img1.png"
                      alt="img1"
                >变量和闭包</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><blockquote>
<p>加 var 和不加 var 的变量区别</p>
</blockquote>
<p>需要注意的是：</p>
<ul>
<li>加<code>var</code>的变量在预编译的期间会提升，但是不加<code>var</code>的变量在预编译的时候不会提升</li>
<li>不管是否加<code>var</code>，只要是全局变量，在非严格模式下都会挂载到<code>GO</code>上</li>
<li>加<code>var</code>的变量既可以做全局变量也可以局部变量，不加<code>var</code>只能全局变量</li>
</ul>
<p>平时做项目基本不用<code>var</code>，更不要不定义变量类型</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="comment">//虽然有变量提升，但是var只提升了定义，并没有赋值所以应该是undefined var a=1;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//此时a被赋值为1所以应该输出1 console.log(window.a);</span></span><br><span class="line">  <span class="comment">//a挂载到GO上，所以在逐层访问的时候能够访问到，下面的b同理 // console.log(b);</span></span><br><span class="line">  <span class="comment">//会输出undefined b=2; console.log(window.b);</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>使用 let 声明变量</p>
</blockquote>
<p>使用<code>let</code>声明的变量没有提升，或者可以理解为变量提升了，但是没有赋值，也就是不能直接访问</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//ReferenceError: Cannot access &#x27;a&#x27; before initialization let</span></span><br><span class="line">  a=<span class="number">2</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p><code>let+&#123;&#125;</code>可以形成块级作用域，块级作用域中定义的变量，只能在块中使用</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> b=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);     <span class="comment">//  1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);     <span class="comment">//Uncaught ReferenceError: b is not defined</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p>使用<code>let</code>声明的变量，并不会挂载到<code>GO</code>上</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="keyword">let</span> a=<span class="number">1</span>; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>); <span class="comment">//undefined&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><code>let</code>不能重复声明</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">let</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">1</span>;	<span class="comment">//报错，a不能重复声明</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//形参相当于函数内部定义的局部变量</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//VO：AO已经有a，也会报错</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//Uncaught SyntaxError: Identifier &#x27;a&#x27; has already been declared</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> a=<span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">fn</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<p>所以项目中声明变量基本使用<code>let</code>，弥补了<code>var</code>声明变量的缺点</p>
<blockquote>
<p>使用 const 声明变量（常量）的特点</p>
</blockquote>
<ul>
<li>声明不能被修改</li>
<li>使用<code>const</code>声明变量时，必须赋值，不然会报语法错误</li>
<li><code>const</code> 声明的变量也不会提升</li>
<li><code>const</code> 和<code>&#123;&#125;</code>也可以形成块级作用域</li>
<li><code>const</code> 声明的变量也不会挂载到<code>GO</code>上</li>
</ul>
<blockquote>
<p>总结：在项目中，定义变量用 let，定义常量用 const</p>
</blockquote>
<h5 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h5><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(fn);     <span class="comment">//  打印undefine</span></span><br><span class="line">   <span class="comment">//window.fn();     //   报错fn is not a function</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">fn</span>);  <span class="comment">//undefine fn说明挂载到了GO</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="string">&quot;fn&quot;</span><span class="keyword">in</span> <span class="variable language_">window</span>)&#123;   <span class="comment">//满足条件</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">fn</span>();       <span class="comment">//.....</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    函数位于if条件中，</span></span><br><span class="line"><span class="comment">    在最新版本的浏览器中，不会提升整体，只会提升fn函数名</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">fn</span>();        <span class="comment">//.....</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="title function_">fn</span>();  <span class="comment">//最后一次函数提升是打印5，所以输出5</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);&#125; <span class="comment">//函数提升，打印1</span></span><br><span class="line"> <span class="title function_">fn</span>();  <span class="comment">//打印5</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);&#125;<span class="comment">//函数再提升，覆盖1，打印2</span></span><br><span class="line"> <span class="title function_">fn</span>();  <span class="comment">//打印5</span></span><br><span class="line"> <span class="keyword">var</span> fn =<span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);&#125;<span class="comment">//函数名提升，相当于赋值</span></span><br><span class="line"> <span class="title function_">fn</span>();  <span class="comment">//打印3</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);&#125; <span class="comment">//函数提升打印4</span></span><br><span class="line"> <span class="title function_">fn</span>();  <span class="comment">//打印3</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);&#125;<span class="comment">//函数提升打印5</span></span><br><span class="line"> <span class="title function_">fn</span>();  <span class="comment">//打印3</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">1</span>;b=<span class="number">2</span>;c=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>)&#123;     <span class="comment">//相当于函数局部变量a</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c); <span class="comment">//先找函数执行上下文，传入了20则a=20,b=2,c-3</span></span><br><span class="line">        a=<span class="number">100</span>;</span><br><span class="line">        b=<span class="number">200</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c); <span class="comment">//a被赋值为100，b为200，c：4</span></span><br><span class="line">    &#125;</span><br><span class="line">    b=<span class="title function_">fn</span>(<span class="number">20</span>);   <span class="comment">//b为undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c); <span class="comment">//log:  1 undefined 3</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>先看代码</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">x</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="title function_">A</span>();</span><br><span class="line">    <span class="title function_">y</span>();</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">20</span>;</span><br><span class="line">        <span class="title function_">y</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">B</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p>画出部分堆栈图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img2.png"
                      alt="img2"
                ></p>
<blockquote>
<p>按照堆栈函数调用来说，当 A 函数调用完毕，ECA 出栈，ECA 中分配的占内存，也就是 i，需要回收。但是，由于 ECG 中的一个 y，引用着这个 0x345 的堆空间，0x345 堆空间中存在着 ECA 中 i 的栈空间，所以说，0x345 这个堆和 ECA 中的 i 是不能被释放。一个不能被回收释放掉的栈空间，叫做闭包，i 会常驻内存，会造成内存空间泄露。</p>
</blockquote>
<p>然后再调用函数 y，执行上下文<code>ECy</code>入栈<code>console.log(y)</code>，所以再去作用域链里寻找<code>i</code>，作用域链里包含自身<code>VO</code>和父<code>VO</code>，最终在父<code>VO</code>里找到<code>i</code>为<code>2</code> 输出。调用之后，出栈销毁。</p>
<p>然后调用函数<code>B</code>，执行上下文<code>ECB</code>，包含<code>VO：AO</code>，ｉ的值为<code>20</code>，然后调用ｙ又产生一个执行上下文<code>ECy2</code>，<code>ECy2</code>中只有<code>console.log</code>(i)，所以在作用域链中寻找，在父<code>VO</code>中找到<code>i=2</code></p>
<p>所以最终控制台输出 2 2</p>
<blockquote>
<p>闭包：一个不能被回收的栈内存，就可以被成为闭包</p>
<p>作用：</p>
<ul>
<li>保护 EC 中的变量，外界不能直接访问</li>
<li>可以让我们像使用全局变量一样使用局部变量，延长了变量的生命周期</li>
</ul>
</blockquote>
<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p><code>this</code>：字面意思是“这个”的意思</p>
<blockquote>
<p><code>this</code>和书写的位置没有关系，和调用的方式有关系，是产生执行上下文<code>EC</code>的时候动态绑定的</p>
<p><code>this</code>的绑定规则：</p>
<ul>
<li>默认绑定</li>
<li>隐式绑定</li>
<li>显式绑定</li>
<li><code>new</code>绑定</li>
</ul>
</blockquote>
<h4 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h4><p>独立函数调用就是所谓的默认绑定，独立的函数调用我们可以理解成函数没有被绑定到某个对象上进行调用</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>();<span class="comment">//独立函数调用,函数内部的this表示window</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!----------------------------------------&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">//window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">gn</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">//window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        fn;     <span class="comment">//独立函数调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">kn</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">//window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">gn</span>();   <span class="comment">//独立函数调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">kn</span>();<span class="comment">//独立函数调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!----------------------------------------&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> obj = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>:<span class="string">&quot;老八&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">fn</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> gn= obj.<span class="property">fn</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">gn</span>();   <span class="comment">//独立函数调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!----------------------------------------&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> o=&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>:<span class="string">&quot;老八&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">fun</span>:fun</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> gn=obj,fn;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">gn</span>();       <span class="comment">//独立函数调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>以上<code>this</code>指向的都是<code>window</code></p>
<h4 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h4><p>另外一种比较常见的调用方式是通过某个对象进行调用的，他就是它的调用位置中，是通过某个对象发起的函数调用</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;老八&quot;</span>,</span><br><span class="line">        <span class="attr">fn</span>: fn</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过obj打点调用，fn中this表示什么，</span></span><br><span class="line">    <span class="comment">//就看点前面是什么，点前面是obj，this就是obj</span></span><br><span class="line">    obj.<span class="title function_">fn</span>();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出：&#123;name:&#x27;老八&#x27;,fn: f&#125;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h4><p><code>JS</code>中，函数有多种角色</p>
<ul>
<li>普通函数</li>
<li>对象中的方法</li>
<li>对象（属性的无序集合，内部有很多默认属性和方法，<code>call,apply,bind...</code>）</li>
<li>类（构造器，构造函数）</li>
</ul>
<p><code>call()</code></p>
<ul>
<li>显示绑定<code>this</code></li>
<li>让<code>fn()</code>执行</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, num1 + num2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;zy&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//call()从第二个参数开始，开始传递参数给函数</span></span><br><span class="line">    fn.<span class="title function_">call</span>(fn, <span class="number">222</span>, <span class="number">333</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//独立调用函数 this表示window</span></span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p><code>apply()</code></p>
<p><code>apply</code>作用和<code>call</code>一样，传参方式不同，需要把参数放到一个数组</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">fn.<span class="title function_">apply</span>(obj, [<span class="number">222</span>, <span class="number">333</span>]);</span><br></pre></td></tr></table></figure></div>

<p><code>bind()</code></p>
<p>作用和<code>call()</code>一样但是不会让函数执行，返回<code>this</code>之后的新函数</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> newFn = fn.<span class="title function_">bind</span>(obj, <span class="number">222</span>, <span class="number">333</span>);</span><br><span class="line"><span class="title function_">newFn</span>();</span><br></pre></td></tr></table></figure></div>

<h5 id="显式绑定总结："><a href="#显式绑定总结：" class="headerlink" title="显式绑定总结："></a>显式绑定总结：</h5><ul>
<li><code>call fn.call(obj,1,2)</code> 显式绑定<code>this</code>,让<code>fn()</code>执行 ，也能传参</li>
<li><code>apply fn.apply(obj,[1,2])</code> 显式绑定 <code>this</code>，让<code>fn()</code>执行，参数放到数组中</li>
<li><code>bind fn.bind(obj,1,2)</code> 显式绑定<code>this</code>，返回绑定<code>this</code>后的新函数，也能传参</li>
</ul>
<h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// String&#123;&#x27;hello&#x27;&#125;是一个对象，</span></span><br><span class="line"><span class="comment">// 会拿hello包装成一个对象</span></span><br><span class="line">fn.<span class="title function_">call</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">//一项两种实际上是绑定到了window上</span></span><br><span class="line">fn.<span class="title function_">call</span>(<span class="literal">undefined</span>);</span><br><span class="line">fn.<span class="title function_">call</span>(<span class="literal">null</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="new-绑定"><a href="#new-绑定" class="headerlink" title="new 绑定"></a>new 绑定</h4><p><code>JS</code>中，函数有多种角色</p>
<ul>
<li>普通函数</li>
<li>对象中的方法</li>
<li>函数也是对象</li>
<li>函数也是类（构造函数&#x2F;构造器），通常情况下首字母大写</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//定义一个类，Person，构造器、构造函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//new在函数内部创建了一个对象</span></span><br><span class="line">        <span class="comment">//把函数内的this绑定到了对象上</span></span><br><span class="line">        <span class="comment">//函数执行</span></span><br><span class="line">        <span class="comment">//返回这个对象(new完后，肯定是得到一个对象)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//this指向对象</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;xdec&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//new一个类。得到一个对象</span></span><br><span class="line">    <span class="keyword">let</span> p2=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;xxx&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span><br><span class="line">    <span class="comment">//控制台:  Person&#123;name:xxx,age:1&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//每new一次就创建出一个新的对象</span></span><br><span class="line">    <span class="keyword">let</span> p3=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;yyy&quot;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p2);</span><br><span class="line">    <span class="comment">//控制台：  Person&#123;name:yyy,age:3&#125;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="this-绑定的优先级"><a href="#this-绑定的优先级" class="headerlink" title="this 绑定的优先级"></a>this 绑定的优先级</h4><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);    <span class="comment">// 定时器中的this表示window</span></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//监听器中的this表示事件源</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//控制台输出 &lt;button id=&quot;btn&quot;&gt;按钮&lt;/button&gt;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>默认绑定的优先级最低</li>
<li>显示绑定的优先级高于隐式绑定</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">        <span class="comment">//显式绑定</span></span><br><span class="line">        <span class="attr">fn</span>: fn.<span class="title function_">bind</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;yyy&quot;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//隐式绑定</span></span><br><span class="line">    obj.<span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终控制台输出&#123;name:&#x27;yyy&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>new 绑定优先级高于隐式绑定</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">let</span> obj = &#123;</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">       <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">let</span> res = <span class="keyword">new</span> obj.<span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//最终控制台输出	fn&#123;&#125;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>new 绑定高于显式绑定</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> gn = fn.<span class="title function_">bind</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span> &#125;)</span><br><span class="line">    <span class="comment">//  gn();       //&#123;name:&#x27;xxx&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title function_">gn</span>();       <span class="comment">//fn&#123;&#125;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>new 绑定不能和 call 和 apply 比较</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> res = fn.<span class="title function_">call</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span> &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title function_">res</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> <span class="title function_">foo</span> = (<span class="params">nums</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> nums * <span class="number">2</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果形参只有一个，那么()可以不写</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> <span class="title function_">foo</span> = nums =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> nums * <span class="number">2</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果函数体只有一条语句，那么&#123;&#125;和return 都可以不写</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> <span class="title function_">foo</span> = nums =&gt; nums * <span class="number">2</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果函数只有一条语句并且返回一个对象</span></span><br><span class="line"><span class="comment">// 需要将对象()起来</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> <span class="title function_">foo</span> = a =&gt; (&#123; <span class="attr">a</span>: <span class="number">32131</span> &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  没有形参，()不能省略</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">var</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; (&#123; <span class="attr">a</span>: <span class="number">32131</span> &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<h4 id="箭头函数中的-this"><a href="#箭头函数中的-this" class="headerlink" title="箭头函数中的 this"></a>箭头函数中的 this</h4><p>箭头函数中的 this 需要往上找一层</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">gn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显式绑定</span></span><br><span class="line">    gn.<span class="title function_">call</span>(obj);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制台输出 window</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    fn.<span class="title function_">call</span>(<span class="string">&quot;hello&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    fn.<span class="title function_">call</span>(&#123;&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//返回的都是window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> obj = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">fn</span>: <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    obj.<span class="title function_">fn</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="number">2000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 没用箭头函数的时候指向window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 使用箭头函数之后还是指向window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>html<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>css<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>js<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 得到一个伪数组，伪数组不是数组，是对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//  &#123;0:&quot;a&quot;,2:&quot;b&quot;,3:&quot;c&quot;&#125;伪数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">dir</span>(lis[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>一个真实的<code>dom</code>元素，本质就是一个对象，这个对象的属性非常多，操作这个对象，性能就很低，由此<code>JQuery</code>被取代，<code>JQuery</code>操作的就是<code>DOM</code>元素，<code>vue、react</code>操作的就是虚拟<code>DOM</code>元素，虚拟<code>DOM</code>元素的属性灭有那么多</p>
<h4 id="new-的原理"><a href="#new-的原理" class="headerlink" title="new 的原理"></a>new 的原理</h4><p><code>new</code>做了什么：</p>
<ul>
<li>在构造器内部创建一个新的对象</li>
<li>这个歌对象的<code>prototype</code>属性会被复制为该构造函数的<code>prototype</code>属性</li>
<li>让构造器中的<code>this</code>指向这个对象</li>
<li>执行构造器中的代码</li>
<li>如果构造器中没有返回对象，则返回上面创建出来的对象</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数在JS中有多种角色，其中一种角色就是构造器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn...&quot;</span>);</span><br><span class="line">  <span class="comment">//1.创建一个新的对象</span></span><br><span class="line">  <span class="comment">//2.让函数中的this绑定到这个新对象上(new绑定)</span></span><br><span class="line">  <span class="comment">//3.执行类（函数）中的代码</span></span><br><span class="line">  <span class="comment">//4.返回上面的新对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br></pre></td></tr></table></figure></div>

<h3 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h3><h4 id="公有属性和私有属性"><a href="#公有属性和私有属性" class="headerlink" title="公有属性和私有属性"></a>公有属性和私有属性</h4><p>只要是一个对象，身上必定有一个属性叫<code>__proto__</code>，<code>__proto__</code>是属性名，叫隐式原型</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">obj是一个对象，对象是属性的无序集合，属性又分为两类：</span></span><br><span class="line"><span class="comment">	1.私有属性</span></span><br><span class="line"><span class="comment">	2.公有属性	沿着__proto__找到的属性都是公有属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span>, <span class="comment">//私有属性</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//obj. 找hanOwnProperty，自己私有属性没有，就沿着__proto__去公有属性找</span></span><br><span class="line"><span class="comment">//只有找到了这个属性或方法，才能使用这个属性或方法</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">hasOwnProperty</span>());</span><br></pre></td></tr></table></figure></div>

<p><code>a.b</code></p>
<p>先去自己的<code>EC</code>（执行上下文）中找<code>a</code>，如果找不到，就去父的<code>EC</code>中找，如果还找不到，就去父的父中找，直到找到<code>ECG</code>（全局执行上下文），如果还找不到，<code>error: a is not defined</code>，整个查找机制就叫做作用域链。</p>
<p>找<code>b</code>，先找自己的私有属性，如果找不到，就沿<code>__proto__</code>去公有属性中找，如果公有属性一直找不到，得到<code>undefined</code>，因为查找一个对象上不存在的属性，得到<code>undefined</code>，叫原型链</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//__proto__对应的值是一个对象，这个对象，叫做原型对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//obj.__proto__ 对应的是原型对象</span></span><br><span class="line"><span class="comment">//hasOwnProperty 相对于原型对象来说,是私有属性</span></span><br><span class="line">obj.<span class="property">__proto__</span>.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//原型对象，也是对象，只要是一个对象，身上都有一个__proto__</span></span><br><span class="line"><span class="comment">//如果一直找下去，就找到了null</span></span><br><span class="line"><span class="comment">// console.log(obj.__proto__.__proto__);</span></span><br></pre></td></tr></table></figure></div>

<h6 id="in"><a href="#in" class="headerlink" title="in"></a>in</h6><p>判断一个属性是否的呼吁某个对象（私有、公有）</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;push&quot;</span> <span class="keyword">in</span> arr); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></div>

<h6 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h6><p>判断是否是私有</p>
<h4 id="隐式原型和显式原型"><a href="#隐式原型和显式原型" class="headerlink" title="隐式原型和显式原型"></a>隐式原型和显式原型</h4><h6 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h6><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;wc&quot;</span>, <span class="string">&quot;xq&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span> == arr1.<span class="property">__proto__</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="property">__proto__</span>.<span class="property">__proto__</span> == <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>); <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure></div>

<h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p>作用域链：是在<code>EC</code>中查找数据的机制</p>
<p>原型链：实在对象上查找属性的机制</p>
<h5 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h5><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;xxx&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>.<span class="property">constructor</span> == <span class="title class_">Person</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="property">__proto__</span>.<span class="property">constructor</span> == <span class="title class_">Number</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></div>

<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul>
<li>一切都是对象</li>
<li>对象是属性的无序集合</li>
<li>属性分为公有属性和私有属性</li>
<li>每个对象身上都有一个<code>__proto__</code>(隐式原型)</li>
<li>每个函数身上都有一个<code>prototype</code>(显式原型)</li>
<li>对象的隐式原型和函数的显式原型，指向一个对象，叫做原型对象</li>
<li>每一个原型对象身上有一个<code>constructor</code>属性指向函数本身</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/2023/06/03/Vue/</url>
    <content><![CDATA[<h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><pre><code>├── node_modules
├── public
│   ├── favicon.ico: 页签图标
│   └── index.html: 主页面
├── src
│   ├── assets: 存放静态资源
│   │   └── logo.png
│   │── component: 存放组件
│   │   └── HelloWorld.vue
│   │── App.vue: 汇总所有组件
│   │── main.js: 入口文件
├── .gitignore: git版本管制忽略的配置
├── babel.config.js: babel的配置文件
├── package.json: 应用包配置文件
├── README.md: 应用描述文件
├── package-lock.json：包版本控制文件
</code></pre>
<h2 id="关于不同版本的-Vue"><a href="#关于不同版本的-Vue" class="headerlink" title="关于不同版本的 Vue"></a>关于不同版本的 Vue</h2><ol>
<li>vue.js 与 vue.runtime.xxx.js 的区别：<ol>
<li>vue.js 是完整版的 Vue，包含：核心功能 + 模板解析器。</li>
<li>vue.runtime.xxx.js 是运行版的 Vue，只包含：核心功能；没有模板解析器。</li>
</ol>
</li>
<li>因为 vue.runtime.xxx.js 没有模板解析器，所以不能使用 template 这个配置项，需要使用 render 函数接收到的 createElement 函数去指定具体内容。</li>
</ol>
<h2 id="vue-config-js-配置文件"><a href="#vue-config-js-配置文件" class="headerlink" title="vue.config.js 配置文件"></a>vue.config.js 配置文件</h2><ol>
<li>使用 vue inspect &gt; output.js 可以查看到 Vue 脚手架的默认配置。</li>
<li>使用 vue.config.js 可以对脚手架进行个性化定制，详情见：<a class="link"   href="https://cli.vuejs.org/zh" >https://cli.vuejs.org/zh <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ol>
<h2 id="ref-属性"><a href="#ref-属性" class="headerlink" title="ref 属性"></a>ref 属性</h2><ol>
<li>被用来给元素或子组件注册引用信息（id 的替代者）</li>
<li>应用在 html 标签上获取的是真实 DOM 元素，应用在组件标签上是组件实例对象（vc）</li>
<li>使用方式：<ol>
<li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li>
<li>获取：<code>this.$refs.xxx</code></li>
</ol>
</li>
</ol>
<h2 id="props-配置项"><a href="#props-配置项" class="headerlink" title="props 配置项"></a>props 配置项</h2><ol>
<li><p>功能：让组件接收外部传过来的数据</p>
</li>
<li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p>
</li>
<li><p>接收数据：</p>
<ol>
<li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;] </code></p>
</li>
<li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p>
</li>
<li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">	<span class="attr">name</span>:&#123;</span><br><span class="line">	<span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">//类型</span></span><br><span class="line">	<span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line">	<span class="attr">default</span>:<span class="string">&#x27;老王&#x27;</span> <span class="comment">//默认值</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<blockquote>
<p>备注：props 是只读的，Vue 底层会监测你对 props 的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制 props 的内容到 data 中一份，然后去修改 data 中的数据。</p>
</blockquote>
</li>
</ol>
<h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h2><ol>
<li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p>
</li>
<li><p>使用方式：</p>
<p>第一步定义混合：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    data()&#123;....&#125;,</span><br><span class="line">    methods:&#123;....&#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>第二步使用混入：</p>
<p>​ 全局混入：<code>Vue.mixin(xxx)</code><br>​ 局部混入：<code>mixins:[&#39;xxx&#39;]	</code></p>
</li>
</ol>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol>
<li><p>功能：用于增强 Vue</p>
</li>
<li><p>本质：包含 install 方法的一个对象，install 的第一个参数是 Vue，第二个以后的参数是插件使用者传递的数据。</p>
</li>
<li><p>定义插件：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">对象.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 添加全局指令</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 配置全局混入(合)</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;...&#125;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span> = xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用插件：<code>Vue.use()</code></p>
</li>
</ol>
<h2 id="scoped-样式"><a href="#scoped-样式" class="headerlink" title="scoped 样式"></a>scoped 样式</h2><ol>
<li>作用：让样式在局部生效，防止冲突。</li>
<li>写法：<code>&lt;style scoped&gt;</code></li>
</ol>
<h2 id="总结-TodoList-案例"><a href="#总结-TodoList-案例" class="headerlink" title="总结 TodoList 案例"></a>总结 TodoList 案例</h2><ol>
<li><p>组件化编码流程：</p>
<p>​ (1).拆分静态组件：组件要按照功能点拆分，命名不要与 html 元素冲突。</p>
<p>​ (2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p>
<p>​ 1).一个组件在用：放在组件自身即可。</p>
<p>​ 2). 一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）。</p>
<p>​ (3).实现交互：从绑定事件开始。</p>
</li>
<li><p>props 适用于：</p>
<p>​ (1).父组件 &#x3D;&#x3D;&gt; 子组件 通信</p>
<p>​ (2).子组件 &#x3D;&#x3D;&gt; 父组件 通信（要求父先给子一个函数）</p>
</li>
<li><p>使用 v-model 时要切记：v-model 绑定的值不能是 props 传过来的值，因为 props 是不可以修改的！</p>
</li>
<li><p>props 传过来的若是对象类型的值，修改对象中的属性时 Vue 不会报错，但不推荐这样做。</p>
</li>
</ol>
<h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol>
<li><p>存储内容大小一般支持 5MB 左右（不同浏览器可能还不一样）</p>
</li>
<li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p>
</li>
<li><p>相关 API：</p>
<ol>
<li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code><br>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p>
</li>
<li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p>
<p>​ 该方法接受一个键名作为参数，返回键名对应的值。</p>
</li>
<li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p>
<p>​ 该方法接受一个键名作为参数，并把该键名从存储中删除。</p>
</li>
<li><p><code> xxxxxStorage.clear()</code></p>
<p>​ 该方法会清空存储中的所有数据。</p>
</li>
</ol>
</li>
<li><p>备注：</p>
<ol>
<li>SessionStorage 存储的内容会随着浏览器窗口关闭而消失。</li>
<li>LocalStorage 存储的内容，需要手动清除才会消失。</li>
<li><code>xxxxxStorage.getItem(xxx)</code>如果 xxx 对应的 value 获取不到，那么 getItem 的返回值是 null。</li>
<li><code>JSON.parse(null)</code>的结果依然是 null。</li>
</ol>
</li>
</ol>
<h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ol>
<li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件</strong></p>
</li>
<li><p>使用场景：A 是父组件，B 是子组件，B 想给 A 传数据，那么就要在 A 中给 B 绑定自定义事件（<span style="color:red">事件的回调在 A 中</span>）。</p>
</li>
<li><p>绑定自定义事件：</p>
<ol>
<li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code> 或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p>
</li>
<li><p>第二种方式，在父组件中：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p>
</li>
</ol>
</li>
<li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code></p>
</li>
<li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p>
</li>
<li><p>组件上也可以绑定原生 DOM 事件，需要使用<code>native</code>修饰符。</p>
</li>
<li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在 methods 中</span>，<span style="color:red">要么用箭头函数</span>，否则 this 指向会出问题！</p>
</li>
</ol>
<h2 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h2><ol>
<li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p>
</li>
<li><p>安装全局事件总线：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">	......</span><br><span class="line">	<span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">	&#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用事件总线：</p>
<ol>
<li><p>接收数据：A 组件想接收数据，则在 A 组件中给$bus 绑定自定义事件，事件的<span style="color:red">回调留在 A 组件自身。</span></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p>
</li>
</ol>
</li>
<li><p>最好在 beforeDestroy 钩子中，用$off 去解绑<span style="color:red">当前组件所用到的</span>事件。</p>
</li>
</ol>
<h2 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h2><ol>
<li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p>
</li>
<li><p>使用步骤：</p>
<ol>
<li><p>安装 pubsub：<code>npm i pubsub-js</code></p>
</li>
<li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p>
</li>
<li><p>接收数据：A 组件想接收数据，则在 A 组件中订阅消息，订阅的<span style="color:red">回调留在 A 组件自身。</span></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p>
</li>
<li><p>最好在 beforeDestroy 钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p>
</li>
</ol>
</li>
</ol>
<h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol>
<li>语法：<code>this.$nextTick(回调函数)</code></li>
<li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li>
<li>什么时候用：当改变数据后，要基于更新后的新 DOM 进行某些操作时，要在 nextTick 所指定的回调函数中执行。</li>
</ol>
<h2 id="Vue-封装的过度与动画"><a href="#Vue-封装的过度与动画" class="headerlink" title="Vue 封装的过度与动画"></a>Vue 封装的过度与动画</h2><ol>
<li><p>作用：在插入、更新或移除 DOM 元素时，在合适的时候给元素添加样式类名。</p>
</li>
<li><p>图示：<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img04.sogoucdn.com/app/a/100520146/5990c1dff7dc7a8fb3b34b4462bd0105"
                      style="width:60%" 
                ></p>
</li>
<li><p>写法：</p>
<ol>
<li><p>准备好样式：</p>
<ul>
<li>元素进入的样式：<ol>
<li>v-enter：进入的起点</li>
<li>v-enter-active：进入过程中</li>
<li>v-enter-to：进入的终点</li>
</ol>
</li>
<li>元素离开的样式：<ol>
<li>v-leave：离开的起点</li>
<li>v-leave-active：离开过程中</li>
<li>v-leave-to：离开的终点</li>
</ol>
</li>
</ul>
</li>
<li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置 name 属性：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;transition name=&quot;hello&quot;&gt;</span><br><span class="line">	&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p>
</li>
</ol>
</li>
</ol>
<h2 id="vue-脚手架配置代理"><a href="#vue-脚手架配置代理" class="headerlink" title="vue 脚手架配置代理"></a>vue 脚手架配置代理</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>​ 在 vue.config.js 中添加如下配置：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="attr">proxy</span>: <span class="string">&quot;http://localhost:5000&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>说明：</p>
<ol>
<li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li>
<li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li>
<li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li>
</ol>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>​ 编写 vue.config.js 配置具体代理规则：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/api1&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:5000&quot;</span>, <span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123; <span class="string">&quot;^/api1&quot;</span>: <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;/api2&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:5001&quot;</span>, <span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123; <span class="string">&quot;^/api2&quot;</span>: <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<p>说明：</p>
<ol>
<li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li>
<li>缺点：配置略微繁琐，请求资源时必须加前缀。</li>
</ol>
<h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol>
<li><p>作用：让父组件可以向子组件指定位置插入 html 结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件</strong> 。</p>
</li>
<li><p>分类：默认插槽、具名插槽、作用域插槽</p>
</li>
<li><p>使用方式：</p>
<ol>
<li><p>默认插槽：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">           &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 定义插槽 --&gt;</span><br><span class="line">    &lt;slot&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>具名插槽：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">            &lt;template slot=&quot;center&quot;&gt;</span><br><span class="line">              &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">            &lt;template v-slot:footer&gt;</span><br><span class="line">               &lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 定义插槽 --&gt;</span><br><span class="line">    &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>作用域插槽：</p>
<ol>
<li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games 数据在 Category 组件中，但使用数据所遍历出来的结构由 App 组件决定）</p>
</li>
<li><p>具体编码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">			&lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">				&lt;!-- 生成的是ul列表 --&gt;</span><br><span class="line">				&lt;ul&gt;</span><br><span class="line">					&lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">				&lt;/ul&gt;</span><br><span class="line">			&lt;/template&gt;</span><br><span class="line">		&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category&gt;</span><br><span class="line">			&lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">				&lt;!-- 生成的是h4标题 --&gt;</span><br><span class="line">				&lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">			&lt;/template&gt;</span><br><span class="line">		&lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Category&quot;,</span><br><span class="line">  props: [&quot;title&quot;],</span><br><span class="line">  //数据在子组件自身</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      games: [&quot;红色警戒&quot;, &quot;穿越火线&quot;, &quot;劲舞团&quot;, &quot;超级玛丽&quot;],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>​ 在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信。</p>
<h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><p>​ 多个组件需要共享数据时</p>
<h3 id="3-搭建-vuex-环境"><a href="#3-搭建-vuex-环境" class="headerlink" title="3.搭建 vuex 环境"></a>3.搭建 vuex 环境</h3><ol>
<li><p>创建文件：<code>src/store/index.js</code></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  actions,</span><br><span class="line">  mutations,</span><br><span class="line">  state,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在<code>main.js</code>中创建 vm 时传入<code>store</code>配置项</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">	<span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">	<span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">	store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol>
<li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">//响应组件中加的动作</span></span><br><span class="line">  <span class="title function_">jia</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">    context.<span class="title function_">commit</span>(<span class="string">&quot;JIA&quot;</span>, value);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="comment">//执行加</span></span><br><span class="line">  <span class="title function_">JIA</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">    state.<span class="property">sum</span> += value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">sum</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  actions,</span><br><span class="line">  mutations,</span><br><span class="line">  state,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>组件中读取 vuex 中的数据：<code>$store.state.sum</code></p>
</li>
<li><p>组件中修改 vuex 中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p>
<blockquote>
<p>备注：若没有网络请求或其他业务逻辑，组件中也可以越过 actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p>
</blockquote>
</li>
</ol>
<h3 id="5-getters-的使用"><a href="#5-getters-的使用" class="headerlink" title="5.getters 的使用"></a>5.getters 的使用</h3><ol>
<li><p>概念：当 state 中的数据需要经过加工后再使用时，可以使用 getters 加工。</p>
</li>
<li><p>在<code>store.js</code>中追加<code>getters</code>配置</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">	<span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">	......</span><br><span class="line">	getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>组件中读取数据：<code>$store.getters.bigSum</code></p>
</li>
</ol>
<h3 id="6-四个-map-方法的使用"><a href="#6-四个-map-方法的使用" class="headerlink" title="6.四个 map 方法的使用"></a>6.四个 map 方法的使用</h3><ol>
<li><p><strong>mapState 方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>mapGetters 方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>mapActions 方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>mapMutations 方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<blockquote>
<p>备注：mapActions 与 mapMutations 使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p>
</blockquote>
<h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol>
<li><p>目的：让代码更好维护，让多种数据分类更加明确。</p>
</li>
<li><p>修改<code>store.js</code></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>开启命名空间后，组件中读取 state 数据：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>开启命名空间后，组件中读取 getters 数据：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>开启命名空间后，组件中调用 dispatch</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>开启命名空间后，组件中调用 commit</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol>
<li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li>
<li>前端路由：key 是路径，value 是组件。</li>
</ol>
<h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol>
<li><p>安装 vue-router，命令：<code>npm i vue-router</code></p>
</li>
<li><p>应用插件：<code>Vue.use(VueRouter)</code></p>
</li>
<li><p>编写 router 配置项:</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//引入Luyou 组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&quot;../components/About&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;../components/Home&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>实现切换（active-class 可配置高亮样式）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>指定展示位置</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol>
<li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li>
<li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li>
<li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li>
<li>整个应用只有一个 router，可以通过组件的<code>$router</code>属性获取到。</li>
</ol>
<h3 id="3-多级路由（多级路由）"><a href="#3-多级路由（多级路由）" class="headerlink" title="3.多级路由（多级路由）"></a>3.多级路由（多级路由）</h3><ol>
<li><p>配置路由规则，使用 children 配置项：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      <span class="comment">//通过children配置子级路由</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;news&quot;</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">News</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;message&quot;</span>, <span class="comment">//此处一定不要写：/message</span></span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>跳转（要写完整路径）：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="4-路由的-query-参数"><a href="#4-路由的-query-参数" class="headerlink" title="4.路由的 query 参数"></a>4.路由的 query 参数</h3><ol>
<li><p>传递参数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link</span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">    path: &#x27;/home/message/detail&#x27;,</span><br><span class="line">    query: &#123;</span><br><span class="line">      id: 666,</span><br><span class="line">      title: &#x27;你好&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>接收参数：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span>;</span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span>;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><ol>
<li><p>作用：可以简化路由的跳转。</p>
</li>
<li><p>如何使用</p>
<ol>
<li><p>给路由命名：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line">	<span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line">	<span class="attr">children</span>:[</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">			<span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line">			<span class="attr">children</span>:[</span><br><span class="line">				&#123;</span><br><span class="line">                      <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line">					<span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line">					<span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">				&#125;</span><br><span class="line">			]</span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>简化跳转：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123; name: &#x27;hello&#x27; &#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link</span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">    name: &#x27;hello&#x27;,</span><br><span class="line">    query: &#123;</span><br><span class="line">      id: 666,</span><br><span class="line">      title: &#x27;你好&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></div></li>
</ol>
</li>
</ol>
<h3 id="6-路由的-params-参数"><a href="#6-路由的-params-参数" class="headerlink" title="6.路由的 params 参数"></a>6.路由的 params 参数</h3><ol>
<li><p>配置路由，声明接收 params 参数</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">	<span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">	<span class="attr">children</span>:[</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">			<span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line">			<span class="attr">children</span>:[</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">					<span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line">					<span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">				&#125;</span><br><span class="line">			]</span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>传递参数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link</span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">    name: &#x27;xiangqing&#x27;,</span><br><span class="line">    params: &#123;</span><br><span class="line">      id: 666,</span><br><span class="line">      title: &#x27;你好&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>特别注意：路由携带 params 参数时，若使用 to 的对象写法，则不能使用 path 配置项，必须使用 name 配置！</p>
</blockquote>
</li>
<li><p>接收参数：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">$route.<span class="property">params</span>.<span class="property">title</span>;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="7-路由的-props-配置"><a href="#7-路由的-props-配置" class="headerlink" title="7.路由的 props 配置"></a>7.路由的 props 配置</h3><p>​ 作用：让路由组件更方便的收到参数</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">	<span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line">	<span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">	<span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line">	<span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line">	<span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line">	<span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">			<span class="attr">id</span>:route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">			<span class="attr">title</span>:route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="8-lt-router-link-gt-的-replace-属性"><a href="#8-lt-router-link-gt-的-replace-属性" class="headerlink" title="8.&lt;router-link&gt;的 replace 属性"></a>8.<code>&lt;router-link&gt;</code>的 replace 属性</h3><ol>
<li>作用：控制路由跳转时操作浏览器历史记录的模式</li>
<li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li>
<li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li>
</ol>
<h3 id="9-编程式路由导航"><a href="#9-编程式路由导航" class="headerlink" title="9.编程式路由导航"></a>9.编程式路由导航</h3><ol>
<li><p>作用：不借助<code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p>
</li>
<li><p>具体编码：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xiangqing&quot;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: xxx,</span><br><span class="line">    <span class="attr">title</span>: xxx,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xiangqing&quot;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: xxx,</span><br><span class="line">    <span class="attr">title</span>: xxx,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>(); <span class="comment">//前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>(); <span class="comment">//后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(); <span class="comment">//可前进也可后退</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol>
<li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p>
</li>
<li><p>具体编码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;News&quot;&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="11-两个新的生命周期钩子"><a href="#11-两个新的生命周期钩子" class="headerlink" title="11.两个新的生命周期钩子"></a>11.两个新的生命周期钩子</h3><ol>
<li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li>
<li>具体名字：<ol>
<li><code>activated</code>路由组件被激活时触发。</li>
<li><code>deactivated</code>路由组件失活时触发。</li>
</ol>
</li>
</ol>
<h3 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h3><ol>
<li><p>作用：对路由进行权限控制</p>
</li>
<li><p>分类：全局守卫、独享守卫、组件内守卫</p>
</li>
<li><p>全局守卫:</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeEach&quot;</span>, to, <span class="keyword">from</span>);</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">isAuth</span>) &#123;</span><br><span class="line">    <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;school&quot;</span>) === <span class="string">&quot;atguigu&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">//权限控制的具体规则</span></span><br><span class="line">      <span class="title function_">next</span>(); <span class="comment">//放行</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;暂无权限查看&quot;</span>);</span><br><span class="line">      <span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>(); <span class="comment">//放行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;afterEach&quot;</span>, to, <span class="keyword">from</span>);</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">title</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span>; <span class="comment">//修改网页的title</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&quot;vue_test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>独享守卫:</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">	<span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line">			<span class="title function_">next</span>()</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line">			<span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="title function_">next</span>()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>组件内守卫：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><ol>
<li>对于一个 url 来说，什么是 hash 值？—— #及其后面的内容就是 hash 值。</li>
<li>hash 值不会包含在 HTTP 请求中，即：hash 值不会带给服务器。</li>
<li>hash 模式：<ol>
<li>地址中永远带着#号，不美观 。</li>
<li>若以后将地址通过第三方手机 app 分享，若 app 校验严格，则地址会被标记为不合法。</li>
<li>兼容性较好。</li>
</ol>
</li>
<li>history 模式：<ol>
<li>地址干净，美观 。</li>
<li>兼容性和 hash 模式相比略差。</li>
<li>应用部署上线时需要后端人员支持，解决刷新页面服务端 404 的问题。</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
