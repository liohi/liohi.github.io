<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HDFS 文件读写</title>
    <url>/2023/04/15/HDFS%20%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</url>
    <content><![CDATA[<h4 id="启动-HDFS"><a href="#启动-HDFS" class="headerlink" title="启动 HDFS"></a>启动 HDFS</h4><ul>
<li><p>进入 hadoop 用户</p>
<p><code>su hadoop</code></p>
</li>
<li><p>启动 SSH 服务</p>
<p><code>sudo service ssh start</code></p>
</li>
<li><p>连接 localhost</p>
<p><code>ssh localhost</code></p>
</li>
<li><p>开启服务</p>
<p><code>start-all.sh</code></p>
</li>
<li><p>查看</p>
<p><code>jps</code></p>
<p>出现以下信息</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../my_imgs/hdfs1.png"
                      alt="hdfs1"
                ></p>
<p>表示启动成功</p>
</li>
</ul>
<h4 id="准备测试文件"><a href="#准备测试文件" class="headerlink" title="准备测试文件"></a>准备测试文件</h4><p>创建一个工作文件夹</p>
<p><code>$ sudo mkdir /usr/local/hadoop/hadoop-demo</code></p>
<p>进入工作文件夹</p>
<p><code>$ cd /usr/local/hadoop/hadoop-demo</code></p>
<p>创建一个测试文件 testfile，大小 1G</p>
<p><code>$ dd if=/dev/zero of=testfile bs=1M count=1024</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../my_imgs/hdfs2.png"
                      alt="hdfs2"
                ></p>
<h4 id="HDFS-读文件"><a href="#HDFS-读文件" class="headerlink" title="HDFS 读文件"></a>HDFS 读文件</h4><ul>
<li><p>进入 hadoop 目录</p>
<p><code>$ cd /usr/local/hadoop</code></p>
</li>
<li><p>创建 hadoop 工作文件夹</p>
<p><code>hadoop fs -mkdir /test1</code></p>
</li>
<li><p>获取 hadoop 集群报告</p>
<p><code>$ hdfs dfsadmin -report</code></p>
</li>
<li><p>上传本地文件（读）</p>
<p><code>$./bin/hdfs dfs -put /usr/local/hadoop/hadoop-demo/testfile /test1</code></p>
</li>
<li><p>查看</p>
<p><code>$  hadoop fs -ls /test1</code></p>
</li>
</ul>
<h4 id="HDFS-写文件"><a href="#HDFS-写文件" class="headerlink" title="HDFS 写文件"></a>HDFS 写文件</h4><ul>
<li><p>本地创建一个输出文件夹</p>
<p><code>$ sudo mkdir /usr/local/hadoop/hadoop-demo/out</code></p>
</li>
<li><p>写入文件</p>
<p><code>$ ./bin/hdfs dfs -get /test1/testfile /usr/local/hadoop/hadoop-demo/out</code></p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../my_imgs/hdfs3.png"
                      alt="hdfs3"
                ></p>
<p>最终将<code>testfile</code>写入<code>/out</code>文件夹</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../my_imgs/hdfs4.png"
                      alt="hdfs4"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../my_imgs/hdfs5.png"
                      alt="hdfs5"
                ></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>Linux</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax</title>
    <url>/2023/04/16/Ajax/</url>
    <content><![CDATA[<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p><code>HTTP（HyperText Transport Protocol）</code>协议，也就是超文本传输协议，详细规定了浏览器和万维网服务器之间相互通信的规则</p>
<h4 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h4><p>格式与参数</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">行	POST /s?ie=utf<span class="number">-8</span> HTTP/<span class="number">1.1</span></span><br><span class="line">头	HOST<span class="punctuation">:</span> herrick<span class="number">.3</span>vhost.net</span><br><span class="line">	 Cookie<span class="punctuation">:</span> name=herrick</span><br><span class="line">	 Content-type<span class="punctuation">:</span> application/x-www-form-urlencoded</span><br><span class="line">	 User-Agent<span class="punctuation">:</span> chorome<span class="number">-83</span></span><br><span class="line">空行</span><br><span class="line">体</span><br></pre></td></tr></table></figure></div>

<h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">行	HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">头	Content-Type<span class="punctuation">:</span> text/html;charset=utf<span class="number">-8</span></span><br><span class="line">	 Content-length<span class="punctuation">:</span> <span class="number">2048</span></span><br><span class="line">	 Content-encoding<span class="punctuation">:</span> gzip</span><br><span class="line">空行</span><br><span class="line">体	&lt;html&gt;</span><br><span class="line">		&lt;head&gt;</span><br><span class="line">		&lt;/head&gt;</span><br><span class="line">		&lt;body&gt;</span><br><span class="line">			&lt;h1&gt;标题&lt;/h1&gt;</span><br><span class="line">		&lt;/body&gt;</span><br><span class="line">	&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>404</li>
<li>403</li>
<li>401</li>
<li>500 ……</li>
</ul>
<h3 id="express-框架"><a href="#express-框架" class="headerlink" title="express 框架"></a>express 框架</h3><p><code>express</code>框架是一个简介而灵活的<code>node.js</code> <code>Web</code>应用框架，提供了一系列强大的特性创建各种 Web 应用和丰富的<code>HTTP</code>工具。</p>
<p>使用<code>express</code>框架可以快速搭建一个完整功能的网站，所以我们可以利用<code>express</code>模拟一个后端服务的环境</p>
<ul>
<li><p>首先在项目包里利用<code>npm</code>下载<code>express</code></p>
</li>
<li><pre><code>npm i express
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 创建一个`server.js`文件</span><br><span class="line"></span><br><span class="line">- ```javascript</span><br><span class="line">  //引入express</span><br><span class="line">  const &#123; response &#125; = require(&quot;express&quot;);</span><br><span class="line">  const express = require(&quot;express&quot;);</span><br><span class="line"></span><br><span class="line">  //创建应用对象</span><br><span class="line">  const app = express();</span><br><span class="line"></span><br><span class="line">  //创建路由规则</span><br><span class="line">  //request对请求报文封装</span><br><span class="line">  //respose对相应报文封装</span><br><span class="line">  app.get(&quot;/&quot;, (request, response) =&gt; &#123;</span><br><span class="line">    //设置响应</span><br><span class="line">    response.send(&quot;hello express&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  app.listen(8000, () =&gt; &#123;</span><br><span class="line">    console.log(&quot;服务已经启动,8000端口监听中....&quot;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></div>
</code></pre>
</li>
<li><p>然后<code>node server.js</code>,注意路径需要<code>cd</code>到当前包下</p>
</li>
</ul>
<p>此时服务已经启动，控制台显示<code>服务已经启动,8000端口监听中....</code>,网址输入<code>localhost:8000</code>能够看到<code>hello express</code></p>
<h3 id="原生-Ajax"><a href="#原生-Ajax" class="headerlink" title="原生 Ajax"></a>原生 Ajax</h3><p>创建两个文件，一个<code>HTML</code>和一个<code>server.js</code></p>
<p><code>server.js</code></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//.创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//.创建路由规则</span></span><br><span class="line"><span class="comment">//request对请求报文封装</span></span><br><span class="line"><span class="comment">//respose对相应报文封装</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/server&quot;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头，设置允许跨域</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">  <span class="comment">//设置响应体</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&quot;hello express&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//.监听端口启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动,8000端口监听中....&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<p><code>.html</code></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>AJAX GEt 请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 7]&gt;</span></span><br><span class="line"><span class="comment">      &lt;p class=&quot;browsehappy&quot;&gt;</span></span><br><span class="line"><span class="comment">        You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please</span></span><br><span class="line"><span class="comment">        &lt;a href=&quot;#&quot;&gt;upgrade your browser&lt;/a&gt; to improve your experience.</span></span><br><span class="line"><span class="comment">      &lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//获取button元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;button&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//绑定时间</span></span></span><br><span class="line"><span class="language-javascript">      btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.创建对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.初始化，设置请求方法和 url</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://localhost:8000/server&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3.发送</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//4.事件绑定 处理服务端返回的结果</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// on when 当……的时候</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//readystate 是 xhr 对象中的属性，表示状态0 1 2 3 4</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//change 改变</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//判断</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//判断响应状态码 200 404 403 401 500</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2** 成功</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//处理结果 行 头 空行 体</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//1.响应行</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">status</span>); <span class="comment">//状态码</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">statusText</span>); <span class="comment">//状态字符串</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="title function_">getAllResponseHeaders</span>()); <span class="comment">//所有响应头</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>); <span class="comment">//响应体</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">              result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#result</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: solid <span class="number">1px</span> black;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>实现效果如下：</p>
<p>点击发送请求会在显示框内打印出响应体，同时在控制台显示请求信息</p>
<p>以上就完成了一个简单的<code>GET</code>请求</p>
<p>接下来向服务端发起一个<code>POST</code>请求</p>
<p>满足需求是：当鼠标移到显示框的时候，显示框能显示到服务端发来的响应体</p>
<p>修改<code>HTML</code>文件</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 7]&gt;      &lt;html class=&quot;no-js lt-ie9 lt-ie8 lt-ie7&quot;&gt; &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 7]&gt;         &lt;html class=&quot;no-js lt-ie9 lt-ie8&quot;&gt; &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if IE 8]&gt;         &lt;html class=&quot;no-js lt-ie9&quot;&gt; &lt;![endif]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if gt IE 8]&gt;      &lt;html class=&quot;no-js&quot;&gt; &lt;!--&lt;![endif]--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">        AJAX GEt 请求</span><br><span class="line">    <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">        点击发送请求</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 7]&gt;</span></span><br><span class="line"><span class="comment">            &lt;p class=&quot;browsehappy&quot;&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href=&quot;#&quot;&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">        &lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        result.<span class="title function_">addEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;http://localhost:8000/server&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#result</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: solid <span class="number">1px</span> black;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>但是此时如果将鼠标移动到框内，控制台会报错<code>No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</code>因为服务段没有与之匹配的响应规则。此时服务端的规则还是上一小节的<code>GET</code>，所以需要向服务端<code>server.js</code>添加以下规则：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/server&quot;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头，设置允许跨域</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">  <span class="comment">//设置响应体</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&quot;hello express&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<p>重新启动服务<code> node server.js</code>,再次在<code>html</code>页面滑动鼠标到框内，显示响应体成功</p>
<h4 id="POST-请求设置参数"><a href="#POST-请求设置参数" class="headerlink" title="POST 请求设置参数"></a>POST 请求设置参数</h4><p><code>POST</code>请求设置参数，请求体是在<code>send()</code>里设置的，参数的形式任意，但是需要服务端能够处理</p>
<p>比如<code>xhr.send(&#39;a=100&amp;b=200&amp;c=300&#39;)</code>，或者可以<code>xhr.send(&#39;a:100&amp;b:200&amp;c:300&#39;)</code>,或者直接<code>xhr.send(&#39;12341414141&#39;)</code>，只要服务端能够处理就可</p>
<h3 id="Ajax-设置请求头信息"><a href="#Ajax-设置请求头信息" class="headerlink" title="Ajax 设置请求头信息"></a>Ajax 设置请求头信息</h3><p>设置请求信息，只需要在<code>open</code>()后面调用一个方法<code>setRequestHeader</code>例如</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  result.<span class="title function_">addEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;http://localhost:8000/server&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//其中Content-Type是设置请求体内容的类型，后面的内容是参数查询字符串的类型，固定写法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//比如可以自己设定一个头信息</span></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;herrick.3vhost&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="服务端响应json数据"><a href="#服务端响应json数据" class="headerlink" title="服务端响应json数据"></a>服务端响应<code>json</code>数据</h3><p>实际工作中服务端返回数据多数情况都是以<code>json</code>格式发送，那么返回的结果应该怎么处理很重要</p>
<p>首先向<code>server.js</code>添加下面代码<code>all</code>代表接收所有类型的请求</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">all</span>(<span class="string">&quot;/json-server&quot;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头，设置允许跨域</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">  <span class="comment">//设置响应体</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;herrick&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//由于send只能发送jsom或者bufferl类型，所以需要对字符串进行一个转换</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">  response.<span class="title function_">send</span>(str);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<p><code>html</code>文件<code>&lt;script&gt;</code>标签内容如下</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//绑定键盘按下时间</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//发送请求</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//初始化;</span></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://localhost:8000/json-server&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//发送</span></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//事件绑定</span></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>当键盘按下之后，就能接收到服务端传来的<code>json</code>数据</p>
<p>此时数据为一个<code>json</code>格式字符串，我们需要将其变成一个对象</p>
<p>可以手动转换</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">let data = JSON.parse(xhr.response); //然后就可以使用data里面的数据</span><br><span class="line">result.innerHTML = data.name;</span><br></pre></td></tr></table></figure></div>

<p>更推荐自动转换</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">xhr.responseType = &#x27;json&#x27; //然后就可以直接使用数据 result.innerHTML =</span><br><span class="line">xhr.response.name</span><br></pre></td></tr></table></figure></div>

<h3 id="nodemon-工具"><a href="#nodemon-工具" class="headerlink" title="nodemon 工具"></a><code>nodemon</code> 工具</h3><p>作用：自动检测文件改变重启服务</p>
<p>前提：<code>node.js</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g nodemon</span><br><span class="line">//再使用nodemon重启服务</span><br><span class="line">nodemon server.js</span><br><span class="line">//部分用户会出现错误&lt; nodemon : 无法加载文件XXX，因为在此系统上禁止运行脚本。&gt;原因是powershell权限不够</span><br><span class="line">//解决方法</span><br><span class="line">1. win+R输入powershell</span><br><span class="line">2. 输入start-proces s PowerShell -verb runas 进入管理员权限</span><br><span class="line">3. 管理员身份输入set-Exe cutionPolicy RemoteSigned 选择y</span><br><span class="line">4. 再次nodemon server.js 服务启动</span><br><span class="line"></span><br><span class="line">nodemon启动服务后修改服务端代码后就无需重启服务</span><br></pre></td></tr></table></figure></div>

<h3 id="Ajax-IE-缓存问题解决"><a href="#Ajax-IE-缓存问题解决" class="headerlink" title="Ajax-IE 缓存问题解决"></a>Ajax-IE 缓存问题解决</h3><p>问题描述：IE 浏览器会对 Ajax 的请求结果做一个缓存，导致再次发送请求时走的时本地缓存而不是服务器返回的数据，导致最新数据不能接收。</p>
<p>解决方案：修改<code>open()</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">xhr.open(&#x27;GET&#x27;, &#x27;http://localhost:8000/json-server?t=&#x27;+Date.now);</span><br><span class="line">// Date.now是一个时间戳，所以每次都会发送不同请求，浏览器就会判定为两次请求，也就解决了缓存问题</span><br></pre></td></tr></table></figure></div>

<h3 id="Ajax-请求超时和网络异常"><a href="#Ajax-请求超时和网络异常" class="headerlink" title="Ajax 请求超时和网络异常"></a>Ajax 请求超时和网络异常</h3><p>例如：请求两秒为超时</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//超时时间为2s</span><br><span class="line">xhr.timeout = 2000;</span><br><span class="line">//超时回调</span><br><span class="line">xhr.ontimeout = function()&#123;</span><br><span class="line">	alert(&quot;网络超时，请稍后重试！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//异常回调</span><br><span class="line">xhr.onerror = function()&#123;</span><br><span class="line">	alert(&quot;网络异常！&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Ajax-取消请求"><a href="#Ajax-取消请求" class="headerlink" title="Ajax 取消请求"></a>Ajax 取消请求</h3><p>调用<code>XMLHttpRequest</code>的<code>abort()</code></p>
<p>例如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//按下按键取消请求</span><br><span class="line">btn.onclick = function()&#123;</span><br><span class="line">	xhr.abort();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Ajax-重复发送请求"><a href="#Ajax-重复发送请求" class="headerlink" title="Ajax 重复发送请求"></a>Ajax 重复发送请求</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">let</span> isSending = <span class="literal">false</span>;	<span class="comment">//是否正在发送Ajax请求</span></span><br><span class="line">	btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isSending)x.<span class="title function_">abort</span>();	<span class="comment">//如果正在发送，则取消该请求，创建一个新的请求</span></span><br><span class="line">        x = <span class="keyword">new</span> <span class="title class_">XMLHttpRrequest</span>();</span><br><span class="line">        isSending = <span class="literal">true</span>;</span><br><span class="line">        x.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;http://localhost:8000&quot;</span>);</span><br><span class="line">        x.<span class="title function_">send</span>();</span><br><span class="line">        x.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">                isSending = <span class="literal">false</span>;	<span class="comment">//修改标识变量</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="Axios发送Ajax请求"><a href="#Axios发送Ajax请求" class="headerlink" title="Axios发送Ajax请求"></a><code>Axios</code>发送<code>Ajax</code>请求</h3><ul>
<li>首先配置<code>server.js</code></li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//axios 服务</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&quot;/axios-server&quot;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//设置响应头，设置允许跨域</span></span><br><span class="line">  response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">  <span class="comment">//设置响应体</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;herrick&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//由于send只能发送jsom或者bufferl类型，所以需要对字符串进行一个转换</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">  response.<span class="title function_">send</span>(str);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>HTML</code>引用<code>Axios</code>资源</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script</span><br><span class="line">  crossorigin=<span class="string">&quot;anonymous&quot;</span></span><br><span class="line">  src=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.1.3/axios.js&quot;</span></span><br><span class="line">&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a><code>GET</code>请求</h4></li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>); btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span></span><br><span class="line">  (<span class="params"></span>)&#123;<span class="string">&quot; &quot;</span>&#125;</span><br><span class="line">  &#123;axios.<span class="title function_">get</span>(<span class="string">&quot;http://localhost:8000/axios-server&quot;</span>, &#123;</span><br><span class="line">    <span class="comment">//url 参数</span></span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">vip</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p>此时控制台可以看到传递的参数</p>
<ul>
<li></li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive+Hbase 的部署及使用</title>
    <url>/2023/04/24/Hive+Hbase%20%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>HBase 和 Hive 是 Hadoop 生态系统中常用的两个组件。HBase 是一个分布式的非关系型数据库，可以用来存储大量的结构化数据；Hive 是一个基于 Hadoop 的数据仓库工具，可以将结构化数据映射为一张数据库表，并提供类似 SQL 的查询语言。</p>
<h4 id="下载-HBase-和-Hive"><a href="#下载-HBase-和-Hive" class="headerlink" title="下载 HBase 和 Hive"></a>下载 HBase 和 Hive</h4><p>注意<code>Hadoop</code> 与 <code>Hbase</code> 和 <code>Hive</code> 的版本匹配问题，不然到后面会有意外惊喜，我的<code>Hadoop</code>是 3.3.4，如果和我一样后面直接复制我的命令即可，不一样你需要去搜一下你版本对应的<code>Hbase</code> 和<code>Hive</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Hive+Hbase%20%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.assets/version_hbase.png"
                      alt="version_hbase"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Hive+Hbase%20%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.assets/version_hive.png"
                      alt="version_hive"
                ></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /usr/local</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 下载</span></span></span><br><span class="line">wget https://mirrors.aliyun.com/apache/hbase/2.5.3/hbase-2.5.3-bin.tar.gz</span><br><span class="line">wget https://mirrors.aliyun.com/apache/hive/hive-3.1.2/apache-hive-3.1.2-bin.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 解压</span></span></span><br><span class="line">tar -zxvf hbase-2.5.3-bin.tar.gz</span><br><span class="line">tar -zxvf apache-hive-3.1.2-bin.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 改一下名字，并将 hive 移动到Hadoop目录下</span></span></span><br><span class="line">mv apache-hive-3.1.2-bin hadoop/hive</span><br><span class="line">mv hbase-2.5.3 hbase</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 修改权限</span></span></span><br><span class="line">sudo chmod -R 777 hbase hadoop/hive</span><br></pre></td></tr></table></figure></div>

<h4 id="配置-HBase"><a href="#配置-HBase" class="headerlink" title="配置 HBase"></a>配置 HBase</h4><p>配置环境变量（顺便把 Hive 的也配置了）</p>
<p><code>$ vi ~/.bashrc</code></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">## HBASE_HOME</span><br><span class="line">export HBASE_HOME=/usr/local/hbase</span><br><span class="line">export PATH=$PATH:$HBASE_HOME/bin</span><br><span class="line"></span><br><span class="line">## Hive_HOME</span><br><span class="line">export HIVE_HOME=/usr/local/hadoop/hive</span><br><span class="line">export CLASSPATH=.:$&#123;HIVE_HOME&#125;/lib:$CLASSPATH</span><br><span class="line">export PATH=$&#123;HIVE_HOME&#125;/bin:$&#123;HIVE_HOME&#125;/conf:$PATH</span><br></pre></td></tr></table></figure></div>

<p>生效</p>
<p><code>$ source ~/.bashrc</code></p>
<blockquote>
<p>Hadoop 和 HBase 之间需要进行配置，以便 HBase 可以使用 Hadoop 作为其底层存储和计算引擎</p>
</blockquote>
<ul>
<li><p>将 Hadoop 的 core-site.xml 和 hdfs-site.xml 配置文件复制到 HBase 的 conf 目录下：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">cp $HADOOP_HOME/etc/hadoop/core-site.xml $HBASE_HOME/conf/</span><br><span class="line">cp $HADOOP_HOME/etc/hadoop/hdfs-site.xml $HBASE_HOME/conf/</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编辑 HBase 的 hbase-site.xml 文件：</p>
<p><code>vi /usr/local/hbase/conf/hbase-site.xml</code></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>./tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.unsafe.stream.capability.enforce<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h5 id="验证是否启动"><a href="#验证是否启动" class="headerlink" title="验证是否启动"></a>验证是否启动</h5><ul>
<li><p>启动 Hadoop</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">su hadoop</span><br><span class="line"></span><br><span class="line">sudo service ssh start</span><br><span class="line"></span><br><span class="line">ssh localhost</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动 Hadoop</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">start-all.sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动 HBase</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">start-hbase.sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 查看一下</span></span></span><br><span class="line">jps</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Hive+Hbase%20%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.assets/image-20230420193259179.png"
                      alt="image-20230420193259179"
                ></p>
<p>浏览器访问 Web UI <code>localhost: 16010</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Hive+Hbase%20%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.assets/image-20230420193400869.png"
                      alt="image-20230420193400869"
                ></p>
<p>则启动成功</p>
</li>
</ul>
<h4 id="配置-Hive"><a href="#配置-Hive" class="headerlink" title="配置 Hive"></a>配置 Hive</h4><p>在将 Hive 与 HBase 集成时需要使用 MySQL 作为元数据存储。Hive 元数据存储在 RDBMS 中，因此需要一个关系型数据库来存储表和列等元数据信息。</p>
<h5 id="配置-mysql（安装好的跳过）"><a href="#配置-mysql（安装好的跳过）" class="headerlink" title="配置 mysql（安装好的跳过）"></a>配置 mysql（安装好的跳过）</h5><ul>
<li><p>安装 mysql 客户端和服务端</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>设置密码</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>登录</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mysql -u root -p</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 显示如下则成功</span></span></span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Hive+Hbase%20%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.assets/image-20230424102437018.png"
                      alt="image-20230424102437018"
                ></p>
</li>
</ul>
<h5 id="配置-Hive-1"><a href="#配置-Hive-1" class="headerlink" title="配置 Hive"></a>配置 Hive</h5><ul>
<li><p>在 Hadoop 集群中创建一个 Hive 元数据存储目录：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hdfs dfs -mkdir /hive</span><br><span class="line">$ hdfs dfs -mkdir /hive/metastore</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>进入 Hive 的 conf 目录</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/hadoop/hive</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 将 hive-env.sh.template 复制一份并命名为 hive-env.sh</span></span></span><br><span class="line">cp hive-env.sh.template hive-env.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 编辑hive-env.sh</span></span></span><br><span class="line">vi hive-env.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 加上下面配置</span></span></span><br><span class="line">HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export HIVE_CONF_DIR=/usr/local/hadoop/hive/conf</span><br><span class="line">export HIVE_AUX_JARS_PATH=/usr/local/hadoop/hive/lib</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>创建一个 hive-site.xml 文件并加上下面配置（<code>vi hive-site.xml</code>）</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/metastore?createDatabaseIfNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.local.scratchdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop/hive/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>hive 下创建一个 <code>warehouse</code> 和 <code>logs</code>文件夹</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/hive$  mkdir /usr/local/hadoop/hive/warehouse</span><br><span class="line">/hive$  mkdir -p logs</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>hive&#x2F;conf 对 hive-log4j2.properties 配置</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">/hive$ </span><span class="language-bash"> <span class="built_in">cd</span> conf</span></span><br><span class="line"><span class="meta prompt_">/conf$ </span><span class="language-bash"> <span class="built_in">mv</span> hive-log4j2.properties.template hive-log4j2.properties</span></span><br><span class="line"><span class="meta prompt_">/conf$ </span><span class="language-bash"> sudo vi hive-log4j2.properties</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 将第 24 行左右修改（vim 可以直接 :24 跳转到24行）</span></span></span><br><span class="line"></span><br><span class="line">property.hive.log.dir = /usr/local/hadoop/hive/logs</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>进入 hive&#x2F;lib 下面下载 <code>mysql-connector-java</code>的 jar 包，可使用下面命令</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-8.0.27.tar.gz</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 解压</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 将jar 包移动到 hive/lib 目录下，此处省略</span></span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>初始化 metastore 数据库：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">schematool -initSchema -dbType mysql -verbose</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>启动 metastore 服务</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">hive --service metastore</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><p>另开一个终端</p>
<ul>
<li><p>启动 hive</p>
<p><code>$ hive</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Hive+Hbase%20%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.assets/image-20230424120736490.png"
                      alt="image-20230424120736490"
                ></p>
</li>
<li><p>创建一个测试表进行测试</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test (id <span class="type">INT</span>, name STRING);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;test1&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;test2&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;test3&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Hive+Hbase%20%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.assets/image-20230424152756644.png"
                      alt="image-20230424152756644"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Hive+Hbase%20%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.assets/image-20230424152814130.png"
                      alt="image-20230424152814130"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Hive+Hbase%20%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.assets/image-20230424152823200.png"
                      alt="image-20230424152823200"
                ></p>
</li>
<li><p>退出</p>
<p>&gt; <code>exit</code></p>
</li>
<li><p>关闭服务</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">stop-hbase.sh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">stop-all.sh</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ul>
<h6 id="至此，Hbase-Hive-配置完成"><a href="#至此，Hbase-Hive-配置完成" class="headerlink" title="至此，Hbase+Hive 配置完成"></a>至此，Hbase+Hive 配置完成</h6>]]></content>
      <categories>
        <category>笔记</category>
        <category>Linux</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MapReduce 基础操作</title>
    <url>/2023/04/20/MapReduce%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h6 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h6><p><code>MapReduce</code>是一种分布式计算框架，用于处理大规模数据集的计算问题。它是由 Google 公司开发的，旨在简化并行计算的开发。</p>
<p>在<code>MapReduce</code>中，计算问题被分解成两个阶段：映射（<code>Map</code>）和归约（<code>Reduce</code>）。映射阶段将输入数据划分成小的数据块，并将每个数据块映射到一组键值对。然后，这些键值对被传递给归约阶段，归约阶段对键值对进行分组，并对每组执行归约操作，生成最终结果。</p>
<p><code>MapReduce</code>的优点是它可以在大规模计算集群上高效地并行运行，而无需开发人员关心底层的并发细节。这使得开发人员可以更专注于算法设计和问题解决，而不是处理并发和分布式系统的复杂性。</p>
<h5 id="前提：确保配置好-Hadoop-环境"><a href="#前提：确保配置好-Hadoop-环境" class="headerlink" title="前提：确保配置好 Hadoop 环境"></a>前提：确保配置好 Hadoop 环境</h5><p>其中 MapReduce 对应 <code>&lt;HADOOP_HOME&gt;/etc/hadoop/mapred_site.xml</code>配置文件：</p>
<p>（我的<code>HADOOP_HOME</code>是<code>/usr/local/hadoop</code>则对应）</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mapred_site.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=/usr/local/hadoop<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><ul>
<li><p>进入 Hadoop 用户（取决于个人配置，没添加用户就不用）</p>
<p><code>$ su hadoop</code></p>
</li>
<li><p>启动 ssh</p>
<p><code>$ sudo service ssh start</code></p>
</li>
<li><p>链接本地服务</p>
<p><code>$ ssh localhost</code></p>
</li>
<li><p>启动服务</p>
<p><code>$ start-all.sh</code></p>
</li>
<li><p>jps 查看，显示如下则启动成功</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Map%20Reduce%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE.assets/image-20230419161304679.png"
                      alt="image-20230419161304679"
                ></p>
</li>
</ul>
<h4 id="编写-WordCount-java"><a href="#编写-WordCount-java" class="headerlink" title="编写 WordCount.java"></a>编写 WordCount.java</h4><ul>
<li><p>创建工作文件夹</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /usr/local/hadoop</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">mkdir</span> hadoop-demo</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">chmod</span> -R 777 hadoop-demo <span class="comment"># 修改权限</span></span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编写 <code>WordCount.java</code></p>
<p><code>$ vi WordCOunt.java</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordCount</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TokenizerMapper</span></span><br><span class="line">            <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, IntWritable&gt;&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">IntWritable</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="type">Text</span> <span class="variable">word</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Context context</span></span><br><span class="line"><span class="params">        )</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="type">StringTokenizer</span> <span class="variable">itr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(value.toString());</span><br><span class="line">            <span class="keyword">while</span> (itr.hasMoreTokens()) &#123;</span><br><span class="line">                word.set(itr.nextToken());</span><br><span class="line">                context.write(word, one);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IntSumReducer</span></span><br><span class="line">            <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text,IntWritable,Text,IntWritable&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">IntWritable</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values,</span></span><br><span class="line"><span class="params">                           Context context</span></span><br><span class="line"><span class="params">        )</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (IntWritable val : values) &#123;</span><br><span class="line">                sum += val.get();</span><br><span class="line">            &#125;</span><br><span class="line">            result.set(sum);</span><br><span class="line">            context.write(key, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;word count&quot;</span>);</span><br><span class="line">        job.setJarByClass(WordCount.class);</span><br><span class="line">        job.setMapperClass(TokenizerMapper.class);</span><br><span class="line">        job.setCombinerClass(IntSumReducer.class);</span><br><span class="line">        job.setReducerClass(IntSumReducer.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]));</span><br><span class="line">        System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="打包成-JAR-文件"><a href="#打包成-JAR-文件" class="headerlink" title="打包成 JAR 文件"></a>打包成 JAR 文件</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">/hadoop-demo</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> classes</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">javac -classpath <span class="variable">$&#123;HADOOP_CLASSPATH&#125;</span> -d classes WordCount.java</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">jar -cvf wordcount.jar -C classes/ .</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>若出现 <code>error: package org.apache.hadoop.conf does not exist</code>等错误可能是 <code>Hadoop</code>环境变量没配好</p>
<p>解决：</p>
<ul>
<li><p><code>sudo vi ~/.bashrc</code></p>
</li>
<li><p>添加以下行</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># HADOOP_HOME</span></span></span><br><span class="line">export HADOOP_HOME=/path/to/hadoop</span><br><span class="line">export HADOOP_CLASSPATH=$($HADOOP_HOME/bin/hadoop classpath)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>source ~/.bashrc</code></p>
</li>
</ul>
</blockquote>
<h4 id="创建测试文件并运行"><a href="#创建测试文件并运行" class="headerlink" title="创建测试文件并运行"></a>创建测试文件并运行</h4><ul>
<li><p>创建一个&#96;input.txt&#96;&#96;</p>
<p><code>vi input.txt</code></p>
</li>
<li><p>随便写点东西…（推荐写几个重复的单词，空格分开，这样结果更直观）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">bulabulabula 不啦不啦</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>将 input.txt 上传到 HDFS 文件系统 (HDFS 文件读写搜索历史文章有介绍)</p>
<p><code>$ hdfs dfs -put input.txt /test1</code></p>
</li>
<li><p>提交 MapReduce 作业</p>
<p><code>$ hadoop jar wordcount.jar WordCount /test1 /output</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Map%20Reduce%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE.assets/image-20230420111459501.png"
                      alt="image-20230420111459501"
                ></p>
</li>
<li><p>将 output 从 HDFS 系统提取出来</p>
<p><code> hdfs dfs -get /output out</code></p>
</li>
<li><p>查看一下</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> out</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 可以看到_SUCCESS 和part_r_00000</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vi part_r_00000</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../assets/Map%20Reduce%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE.assets/image-20230420121625841.png"
                      alt="image-20230420121625841"
                ></p>
<p>两个单词分别 1 个(当然在测试文件里可以创建几个重复的单词更直观)</p>
</li>
</ul>
<h6 id="Over"><a href="#Over" class="headerlink" title="Over!"></a>Over!</h6>]]></content>
      <categories>
        <category>笔记</category>
        <category>Linux</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 学习笔记</title>
    <url>/2023/04/16/javascript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 一个script标签就是一个代码段--&gt;</span><br><span class="line">&lt;!-- 每一个代码段之间相互独立，如果上面代码段报错，不会影响下面代码段--&gt;</span><br><span class="line"><span class="comment">//第一个代码段</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> a=<span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//输出a;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//使用了未声明的变量，报错 c is not defined</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">//报错</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//ReferenceError 引用错误</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//对于引用错误来说，统统一个代码段如果报了引用错误，错误下面代码就停止执行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个代码段</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> b=<span class="number">2</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//上面代码段定义的数据，下面代码段也可以使用，但是下面代码段定义数据不可以在上面使用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="预编译（预解析）"><a href="#预编译（预解析）" class="headerlink" title="预编译（预解析）"></a>预编译（预解析）</h3><p>JS 代码在执行时可分为两个阶段</p>
<ol>
<li>预编译（预解析）</li>
<li>代码执行，即一行一行执行，等到解析结束之后，才会尽心那个代码执行，也就是说浏览器把 JS 代码进行加工之后再去执行，加工的过程就是预编译</li>
</ol>
<p>预编译期间做了什么？</p>
<ol>
<li>声明提升：<code>var</code>变量提升，但是之提升了声明没有赋值。<code>function</code>函数整体提升。提升到代码段最前面</li>
<li>如果在函数内部的局部变量，就提升但函数内部的最前面</li>
</ol>
<blockquote>
<p><strong>ps：var 变量只提升声明，函数提升的是函数整体</strong></p>
</blockquote>
<h3 id="代码执行产生-EC-和-GO"><a href="#代码执行产生-EC-和-GO" class="headerlink" title="代码执行产生 EC 和 GO"></a>代码执行产生 EC 和 GO</h3><p>JS 在内存中主要看内存的栈区和堆区，其中基本数据类型存储在栈区，引用数据类型（函数）存储在堆区，地址存储在栈区</p>
<p>JS 代码主要分两类</p>
<p>全局代码：默认进入<code>script</code>标签就会执行全局代码</p>
<p>函数代码：一个函数就是一个局部函数代码</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//a和b位于全局代码</span></span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> b=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//c和d位于局部代码</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> c=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">var</span> d=<span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>全局代码执行时，会产生全局执行上下文<code>Execution Context Globle(ECG)</code></li>
<li>每调用函数时就产生一个局部的执行上下文</li>
<li>执行上下文产生即放入一个栈空间：执行上下文栈<code>Execution Context Stack(ECS)</code></li>
<li>当函数调用完毕，函数的<code>EC</code>出栈，当<code>ECG</code>执行完毕，<code>ECG</code>也要出栈</li>
</ul>
<p>执行上下文<code>EC</code>的作用：给代码提供数据，代码中需要的数据都从<code>EC</code>中的栈中读取</p>
<p>JS 代码在执行时。会在堆内存中创建一个全局对象<code>Global Object(GO)</code>，这个<code>GO</code>也就是<code>Window</code>，是一个全局对象，对象也就是属性的无序集合。很多<code>API</code>都是<code>Window</code>的属性，例如：<code>Date,Array,String,Number,SetTimeout...</code></p>
<ul>
<li><p>执行全局代码时会在<code>ECS</code>中产生<code>ECG</code> ，在堆内存则会有一个<code>GO(Window)</code></p>
</li>
<li><p>代码执行前<code>ECG</code>中包含两个部分：</p>
<ul>
<li>变量对象<code>VO</code>（此时就等同于<code>GO</code>）</li>
<li>全局代码执行</li>
</ul>
</li>
<li><p>调用函数<code>fn()</code>时，产生一个<code>EC(fn)</code>入栈，包含三个部分</p>
<ul>
<li><p>解析函数称为<code>AST</code>树结构时，会创建一个活动对象<code>Activation Object(AO)</code>,<code>AO</code>中包含形参、arguments、函数定义和指向函数对象、定义的变量</p>
</li>
<li><p>作用域链<code>scopchain</code>：由<code>VO</code>（在函数中就是<code>AO</code>的对象）和父级<code>VO</code>组成，查找时会逐层查找。ps：所谓作用域链就是数据在<code>EC</code>中查找的过程，找一个数据，先在自己的<code>EC</code>中找，如果找不到就去父的<code>EC</code>中找，直到<code>ECG</code>，如果还找不到就报错。</p>
</li>
<li><p><code>this</code>绑定的值</p>
</li>
</ul>
</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">//代码执行前存在GO：包含内置属性和自定义的全局变量和全局函数 var n=1;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n); <span class="comment">//去执行上下文（ECG）中寻找n，ECG中有VO，也就是GO，GO中有n</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">n</span>); <span class="comment">//直接去GO中找n m=2; console.log(m);</span></span><br><span class="line">  <span class="comment">//ECG中找m，GO中有m console.log(x); //ECG中找不到x，x is not define</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">name</span>(name); <span class="comment">//虽然没有自定义name变量，但是GO中内置属性有name</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="再来个栗子"><a href="#再来个栗子" class="headerlink" title="再来个栗子"></a>再来个栗子</h4><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//代码执行产生ECS</span></span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">1</span>;	<span class="comment">//全局代码执行产生ECG,ECG里有VO，也就是GO，a存入到栈区</span></span><br><span class="line">	<span class="keyword">var</span> b=<span class="number">2</span>;	<span class="comment">//b和a同样存入到栈区</span></span><br><span class="line"></span><br><span class="line">	funtion <span class="title function_">fn</span>(<span class="params"></span>)&#123;	<span class="comment">//fn函数体存在堆区，函数地址存在栈区</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> arr=[<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>];	<span class="comment">//数组与函数类似，地址存在栈区，数组体存在堆区</span></span><br><span class="line">	<span class="keyword">var</span> obj=&#123;<span class="attr">name</span>:<span class="string">&quot;老八&quot;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="变量和闭包"><a href="#变量和闭包" class="headerlink" title="变量和闭包"></a><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img1.png"
                      alt="img1"
                >变量和闭包</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><blockquote>
<p>加 var 和不加 var 的变量区别</p>
</blockquote>
<p>需要注意的是：</p>
<ul>
<li>加<code>var</code>的变量在预编译的期间会提升，但是不加<code>var</code>的变量在预编译的时候不会提升</li>
<li>不管是否加<code>var</code>，只要是全局变量，在非严格模式下都会挂载到<code>GO</code>上</li>
<li>加<code>var</code>的变量既可以做全局变量也可以局部变量，不加<code>var</code>只能全局变量</li>
</ul>
<p>平时做项目基本不用<code>var</code>，更不要不定义变量类型</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="comment">//虽然有变量提升，但是var只提升了定义，并没有赋值所以应该是undefined var a=1;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//此时a被赋值为1所以应该输出1 console.log(window.a);</span></span><br><span class="line">  <span class="comment">//a挂载到GO上，所以在逐层访问的时候能够访问到，下面的b同理 // console.log(b);</span></span><br><span class="line">  <span class="comment">//会输出undefined b=2; console.log(window.b);</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>使用 let 声明变量</p>
</blockquote>
<p>使用<code>let</code>声明的变量没有提升，或者可以理解为变量提升了，但是没有赋值，也就是不能直接访问</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//ReferenceError: Cannot access &#x27;a&#x27; before initialization let</span></span><br><span class="line">  a=<span class="number">2</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p><code>let+&#123;&#125;</code>可以形成块级作用域，块级作用域中定义的变量，只能在块中使用</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> b=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);     <span class="comment">//  1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);     <span class="comment">//Uncaught ReferenceError: b is not defined</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p>使用<code>let</code>声明的变量，并不会挂载到<code>GO</code>上</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="keyword">let</span> a=<span class="number">1</span>; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>); <span class="comment">//undefined&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><code>let</code>不能重复声明</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">let</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">1</span>;	<span class="comment">//报错，a不能重复声明</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//形参相当于函数内部定义的局部变量</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//VO：AO已经有a，也会报错</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//Uncaught SyntaxError: Identifier &#x27;a&#x27; has already been declared</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> a=<span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">fn</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<p>所以项目中声明变量基本使用<code>let</code>，弥补了<code>var</code>声明变量的缺点</p>
<blockquote>
<p>使用 const 声明变量（常量）的特点</p>
</blockquote>
<ul>
<li>声明不能被修改</li>
<li>使用<code>const</code>声明变量时，必须赋值，不然会报语法错误</li>
<li><code>const</code> 声明的变量也不会提升</li>
<li><code>const</code> 和<code>&#123;&#125;</code>也可以形成块级作用域</li>
<li><code>const</code> 声明的变量也不会挂载到<code>GO</code>上</li>
</ul>
<blockquote>
<p>总结：在项目中，定义变量用 let，定义常量用 const</p>
</blockquote>
<h5 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h5><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(fn);     <span class="comment">//  打印undefine</span></span><br><span class="line">   <span class="comment">//window.fn();     //   报错fn is not a function</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">fn</span>);  <span class="comment">//undefine fn说明挂载到了GO</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="string">&quot;fn&quot;</span><span class="keyword">in</span> <span class="variable language_">window</span>)&#123;   <span class="comment">//满足条件</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">fn</span>();       <span class="comment">//.....</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    函数位于if条件中，</span></span><br><span class="line"><span class="comment">    在最新版本的浏览器中，不会提升整体，只会提升fn函数名</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">fn</span>();        <span class="comment">//.....</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="title function_">fn</span>();  <span class="comment">//最后一次函数提升是打印5，所以输出5</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);&#125; <span class="comment">//函数提升，打印1</span></span><br><span class="line"> <span class="title function_">fn</span>();  <span class="comment">//打印5</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);&#125;<span class="comment">//函数再提升，覆盖1，打印2</span></span><br><span class="line"> <span class="title function_">fn</span>();  <span class="comment">//打印5</span></span><br><span class="line"> <span class="keyword">var</span> fn =<span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);&#125;<span class="comment">//函数名提升，相当于赋值</span></span><br><span class="line"> <span class="title function_">fn</span>();  <span class="comment">//打印3</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);&#125; <span class="comment">//函数提升打印4</span></span><br><span class="line"> <span class="title function_">fn</span>();  <span class="comment">//打印3</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);&#125;<span class="comment">//函数提升打印5</span></span><br><span class="line"> <span class="title function_">fn</span>();  <span class="comment">//打印3</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">1</span>;b=<span class="number">2</span>;c=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>)&#123;     <span class="comment">//相当于函数局部变量a</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c); <span class="comment">//先找函数执行上下文，传入了20则a=20,b=2,c-3</span></span><br><span class="line">        a=<span class="number">100</span>;</span><br><span class="line">        b=<span class="number">200</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c); <span class="comment">//a被赋值为100，b为200，c：4</span></span><br><span class="line">    &#125;</span><br><span class="line">    b=<span class="title function_">fn</span>(<span class="number">20</span>);   <span class="comment">//b为undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c); <span class="comment">//log:  1 undefined 3</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>先看代码</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">x</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="title function_">A</span>();</span><br><span class="line">    <span class="title function_">y</span>();</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">20</span>;</span><br><span class="line">        <span class="title function_">y</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">B</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p>画出部分堆栈图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img2.png"
                      alt="img2"
                ></p>
<blockquote>
<p>按照堆栈函数调用来说，当 A 函数调用完毕，ECA 出栈，ECA 中分配的占内存，也就是 i，需要回收。但是，由于 ECG 中的一个 y，引用着这个 0x345 的堆空间，0x345 堆空间中存在着 ECA 中 i 的栈空间，所以说，0x345 这个堆和 ECA 中的 i 是不能被释放。一个不能被回收释放掉的栈空间，叫做闭包，i 会常驻内存，会造成内存空间泄露。</p>
</blockquote>
<p>然后再调用函数 y，执行上下文<code>ECy</code>入栈<code>console.log(y)</code>，所以再去作用域链里寻找<code>i</code>，作用域链里包含自身<code>VO</code>和父<code>VO</code>，最终在父<code>VO</code>里找到<code>i</code>为<code>2</code> 输出。调用之后，出栈销毁。</p>
<p>然后调用函数<code>B</code>，执行上下文<code>ECB</code>，包含<code>VO：AO</code>，ｉ的值为<code>20</code>，然后调用ｙ又产生一个执行上下文<code>ECy2</code>，<code>ECy2</code>中只有<code>console.log</code>(i)，所以在作用域链中寻找，在父<code>VO</code>中找到<code>i=2</code></p>
<p>所以最终控制台输出 2 2</p>
<blockquote>
<p>闭包：一个不能被回收的栈内存，就可以被成为闭包</p>
<p>作用：</p>
<ul>
<li>保护 EC 中的变量，外界不能直接访问</li>
<li>可以让我们像使用全局变量一样使用局部变量，延长了变量的生命周期</li>
</ul>
</blockquote>
<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p><code>this</code>：字面意思是“这个”的意思</p>
<blockquote>
<p><code>this</code>和书写的位置没有关系，和调用的方式有关系，是产生执行上下文<code>EC</code>的时候动态绑定的</p>
<p><code>this</code>的绑定规则：</p>
<ul>
<li>默认绑定</li>
<li>隐式绑定</li>
<li>显式绑定</li>
<li><code>new</code>绑定</li>
</ul>
</blockquote>
<h4 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h4><p>独立函数调用就是所谓的默认绑定，独立的函数调用我们可以理解成函数没有被绑定到某个对象上进行调用</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>();<span class="comment">//独立函数调用,函数内部的this表示window</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!----------------------------------------&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">//window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">gn</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">//window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        fn;     <span class="comment">//独立函数调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">kn</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">//window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">gn</span>();   <span class="comment">//独立函数调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">kn</span>();<span class="comment">//独立函数调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!----------------------------------------&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> obj = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>:<span class="string">&quot;老八&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">fn</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> gn= obj.<span class="property">fn</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">gn</span>();   <span class="comment">//独立函数调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!----------------------------------------&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> o=&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>:<span class="string">&quot;老八&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">fun</span>:fun</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> gn=obj,fn;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">gn</span>();       <span class="comment">//独立函数调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>以上<code>this</code>指向的都是<code>window</code></p>
<h4 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h4><p>另外一种比较常见的调用方式是通过某个对象进行调用的，他就是它的调用位置中，是通过某个对象发起的函数调用</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;老八&quot;</span>,</span><br><span class="line">        <span class="attr">fn</span>: fn</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过obj打点调用，fn中this表示什么，</span></span><br><span class="line">    <span class="comment">//就看点前面是什么，点前面是obj，this就是obj</span></span><br><span class="line">    obj.<span class="title function_">fn</span>();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出：&#123;name:&#x27;老八&#x27;,fn: f&#125;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h4><p><code>JS</code>中，函数有多种角色</p>
<ul>
<li>普通函数</li>
<li>对象中的方法</li>
<li>对象（属性的无序集合，内部有很多默认属性和方法，<code>call,apply,bind...</code>）</li>
<li>类（构造器，构造函数）</li>
</ul>
<p><code>call()</code></p>
<ul>
<li>显示绑定<code>this</code></li>
<li>让<code>fn()</code>执行</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, num1 + num2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;zy&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//call()从第二个参数开始，开始传递参数给函数</span></span><br><span class="line">    fn.<span class="title function_">call</span>(fn, <span class="number">222</span>, <span class="number">333</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//独立调用函数 this表示window</span></span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p><code>apply()</code></p>
<p><code>apply</code>作用和<code>call</code>一样，传参方式不同，需要把参数放到一个数组</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">fn.<span class="title function_">apply</span>(obj, [<span class="number">222</span>, <span class="number">333</span>]);</span><br></pre></td></tr></table></figure></div>

<p><code>bind()</code></p>
<p>作用和<code>call()</code>一样但是不会让函数执行，返回<code>this</code>之后的新函数</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> newFn = fn.<span class="title function_">bind</span>(obj, <span class="number">222</span>, <span class="number">333</span>);</span><br><span class="line"><span class="title function_">newFn</span>();</span><br></pre></td></tr></table></figure></div>

<h5 id="显式绑定总结："><a href="#显式绑定总结：" class="headerlink" title="显式绑定总结："></a>显式绑定总结：</h5><ul>
<li><code>call fn.call(obj,1,2)</code> 显式绑定<code>this</code>,让<code>fn()</code>执行 ，也能传参</li>
<li><code>apply fn.apply(obj,[1,2])</code> 显式绑定 <code>this</code>，让<code>fn()</code>执行，参数放到数组中</li>
<li><code>bind fn.bind(obj,1,2)</code> 显式绑定<code>this</code>，返回绑定<code>this</code>后的新函数，也能传参</li>
</ul>
<h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// String&#123;&#x27;hello&#x27;&#125;是一个对象，</span></span><br><span class="line"><span class="comment">// 会拿hello包装成一个对象</span></span><br><span class="line">fn.<span class="title function_">call</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">//一项两种实际上是绑定到了window上</span></span><br><span class="line">fn.<span class="title function_">call</span>(<span class="literal">undefined</span>);</span><br><span class="line">fn.<span class="title function_">call</span>(<span class="literal">null</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="new-绑定"><a href="#new-绑定" class="headerlink" title="new 绑定"></a>new 绑定</h4><p><code>JS</code>中，函数有多种角色</p>
<ul>
<li>普通函数</li>
<li>对象中的方法</li>
<li>函数也是对象</li>
<li>函数也是类（构造函数&#x2F;构造器），通常情况下首字母大写</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//定义一个类，Person，构造器、构造函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//new在函数内部创建了一个对象</span></span><br><span class="line">        <span class="comment">//把函数内的this绑定到了对象上</span></span><br><span class="line">        <span class="comment">//函数执行</span></span><br><span class="line">        <span class="comment">//返回这个对象(new完后，肯定是得到一个对象)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//this指向对象</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;xdec&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//new一个类。得到一个对象</span></span><br><span class="line">    <span class="keyword">let</span> p2=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;xxx&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span><br><span class="line">    <span class="comment">//控制台:  Person&#123;name:xxx,age:1&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//每new一次就创建出一个新的对象</span></span><br><span class="line">    <span class="keyword">let</span> p3=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;yyy&quot;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p2);</span><br><span class="line">    <span class="comment">//控制台：  Person&#123;name:yyy,age:3&#125;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="this-绑定的优先级"><a href="#this-绑定的优先级" class="headerlink" title="this 绑定的优先级"></a>this 绑定的优先级</h4><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);    <span class="comment">// 定时器中的this表示window</span></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//监听器中的this表示事件源</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//控制台输出 &lt;button id=&quot;btn&quot;&gt;按钮&lt;/button&gt;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>默认绑定的优先级最低</li>
<li>显示绑定的优先级高于隐式绑定</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">        <span class="comment">//显式绑定</span></span><br><span class="line">        <span class="attr">fn</span>: fn.<span class="title function_">bind</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;yyy&quot;</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//隐式绑定</span></span><br><span class="line">    obj.<span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终控制台输出&#123;name:&#x27;yyy&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>new 绑定优先级高于隐式绑定</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">let</span> obj = &#123;</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">       <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">let</span> res = <span class="keyword">new</span> obj.<span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//最终控制台输出	fn&#123;&#125;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>new 绑定高于显式绑定</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> gn = fn.<span class="title function_">bind</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span> &#125;)</span><br><span class="line">    <span class="comment">//  gn();       //&#123;name:&#x27;xxx&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title function_">gn</span>();       <span class="comment">//fn&#123;&#125;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>new 绑定不能和 call 和 apply 比较</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> res = fn.<span class="title function_">call</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span> &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title function_">res</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nums * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> <span class="title function_">foo</span> = (<span class="params">nums</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> nums * <span class="number">2</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果形参只有一个，那么()可以不写</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> <span class="title function_">foo</span> = nums =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> nums * <span class="number">2</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果函数体只有一条语句，那么&#123;&#125;和return 都可以不写</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> <span class="title function_">foo</span> = nums =&gt; nums * <span class="number">2</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果函数只有一条语句并且返回一个对象</span></span><br><span class="line"><span class="comment">// 需要将对象()起来</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> <span class="title function_">foo</span> = a =&gt; (&#123; <span class="attr">a</span>: <span class="number">32131</span> &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  没有形参，()不能省略</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">var</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; (&#123; <span class="attr">a</span>: <span class="number">32131</span> &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<h4 id="箭头函数中的-this"><a href="#箭头函数中的-this" class="headerlink" title="箭头函数中的 this"></a>箭头函数中的 this</h4><p>箭头函数中的 this 需要往上找一层</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">gn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显式绑定</span></span><br><span class="line">    gn.<span class="title function_">call</span>(obj);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制台输出 window</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    fn.<span class="title function_">call</span>(<span class="string">&quot;hello&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    fn.<span class="title function_">call</span>(&#123;&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//返回的都是window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> obj = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">fn</span>: <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    obj.<span class="title function_">fn</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="number">2000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 没用箭头函数的时候指向window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 使用箭头函数之后还是指向window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>html<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>css<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>js<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 得到一个伪数组，伪数组不是数组，是对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//  &#123;0:&quot;a&quot;,2:&quot;b&quot;,3:&quot;c&quot;&#125;伪数组</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">dir</span>(lis[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>一个真实的<code>dom</code>元素，本质就是一个对象，这个对象的属性非常多，操作这个对象，性能就很低，由此<code>JQuery</code>被取代，<code>JQuery</code>操作的就是<code>DOM</code>元素，<code>vue、react</code>操作的就是虚拟<code>DOM</code>元素，虚拟<code>DOM</code>元素的属性灭有那么多</p>
<h4 id="new-的原理"><a href="#new-的原理" class="headerlink" title="new 的原理"></a>new 的原理</h4><p><code>new</code>做了什么：</p>
<ul>
<li>在构造器内部创建一个新的对象</li>
<li>这个歌对象的<code>prototype</code>属性会被复制为该构造函数的<code>prototype</code>属性</li>
<li>让构造器中的<code>this</code>指向这个对象</li>
<li>执行构造器中的代码</li>
<li>如果构造器中没有返回对象，则返回上面创建出来的对象</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数在JS中有多种角色，其中一种角色就是构造器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn...&quot;</span>);</span><br><span class="line">  <span class="comment">//1.创建一个新的对象</span></span><br><span class="line">  <span class="comment">//2.让函数中的this绑定到这个新对象上(new绑定)</span></span><br><span class="line">  <span class="comment">//3.执行类（函数）中的代码</span></span><br><span class="line">  <span class="comment">//4.返回上面的新对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br></pre></td></tr></table></figure></div>

<h3 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h3><h4 id="公有属性和私有属性"><a href="#公有属性和私有属性" class="headerlink" title="公有属性和私有属性"></a>公有属性和私有属性</h4><p>只要是一个对象，身上必定有一个属性叫<code>__proto__</code>，<code>__proto__</code>是属性名，叫隐式原型</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">obj是一个对象，对象是属性的无序集合，属性又分为两类：</span></span><br><span class="line"><span class="comment">	1.私有属性</span></span><br><span class="line"><span class="comment">	2.公有属性	沿着__proto__找到的属性都是公有属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span>, <span class="comment">//私有属性</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//obj. 找hanOwnProperty，自己私有属性没有，就沿着__proto__去公有属性找</span></span><br><span class="line"><span class="comment">//只有找到了这个属性或方法，才能使用这个属性或方法</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">hasOwnProperty</span>());</span><br></pre></td></tr></table></figure></div>

<p><code>a.b</code></p>
<p>先去自己的<code>EC</code>（执行上下文）中找<code>a</code>，如果找不到，就去父的<code>EC</code>中找，如果还找不到，就去父的父中找，直到找到<code>ECG</code>（全局执行上下文），如果还找不到，<code>error: a is not defined</code>，整个查找机制就叫做作用域链。</p>
<p>找<code>b</code>，先找自己的私有属性，如果找不到，就沿<code>__proto__</code>去公有属性中找，如果公有属性一直找不到，得到<code>undefined</code>，因为查找一个对象上不存在的属性，得到<code>undefined</code>，叫原型链</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//__proto__对应的值是一个对象，这个对象，叫做原型对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//obj.__proto__ 对应的是原型对象</span></span><br><span class="line"><span class="comment">//hasOwnProperty 相对于原型对象来说,是私有属性</span></span><br><span class="line">obj.<span class="property">__proto__</span>.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//原型对象，也是对象，只要是一个对象，身上都有一个__proto__</span></span><br><span class="line"><span class="comment">//如果一直找下去，就找到了null</span></span><br><span class="line"><span class="comment">// console.log(obj.__proto__.__proto__);</span></span><br></pre></td></tr></table></figure></div>

<h6 id="in"><a href="#in" class="headerlink" title="in"></a>in</h6><p>判断一个属性是否的呼吁某个对象（私有、公有）</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;push&quot;</span> <span class="keyword">in</span> arr); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></div>

<h6 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h6><p>判断是否是私有</p>
<h4 id="隐式原型和显式原型"><a href="#隐式原型和显式原型" class="headerlink" title="隐式原型和显式原型"></a>隐式原型和显式原型</h4><h6 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h6><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;wc&quot;</span>, <span class="string">&quot;xq&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span> == arr1.<span class="property">__proto__</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="property">__proto__</span>.<span class="property">__proto__</span> == <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>); <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure></div>

<h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p>作用域链：是在<code>EC</code>中查找数据的机制</p>
<p>原型链：实在对象上查找属性的机制</p>
<h5 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h5><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;xxx&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>.<span class="property">constructor</span> == <span class="title class_">Person</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="property">__proto__</span>.<span class="property">constructor</span> == <span class="title class_">Number</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></div>

<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul>
<li>一切都是对象</li>
<li>对象是属性的无序集合</li>
<li>属性分为公有属性和私有属性</li>
<li>每个对象身上都有一个<code>__proto__</code>(隐式原型)</li>
<li>每个函数身上都有一个<code>prototype</code>(显式原型)</li>
<li>对象的隐式原型和函数的显式原型，指向一个对象，叫做原型对象</li>
<li>每一个原型对象身上有一个<code>constructor</code>属性指向函数本身</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 单机配置 Hadoop 环境</title>
    <url>/2023/04/16/Ubuntu%20%E5%8D%95%E6%9C%BA%E9%85%8D%E7%BD%AE%20Hadoop/</url>
    <content><![CDATA[<ul>
<li><p>创建<code>Hadoop</code>用户</p>
<p><code> sudo useradd -m hadoop -s /bin/bash</code></p>
</li>
<li><p>设置<code>Hadoop</code>密码</p>
<p><code>sudo passwd hadoop</code></p>
</li>
<li><p>为<code>Hadoop</code>用户增加管理员权限</p>
<p><code>sudo adduser hadoop sudo</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../my_imgs/hadoop1.png"
                      alt="hadoop1"
                ></p>
</li>
<li><h3 id="安装配置SSH"><a href="#安装配置SSH" class="headerlink" title="安装配置SSH"></a>安装配置<code>SSH</code></h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install ssh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">su hadoop</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-keygen -t rsa -P <span class="string">&quot;&quot;</span></span></span><br><span class="line"></span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></div>

<p>接下来运行 ssh 命令,测试一下是否成功.</p>
<p><code>$ ssh localhost</code></p>
</li>
<li><h3 id="配置java环境"><a href="#配置java环境" class="headerlink" title="配置java环境"></a>配置<code>java</code>环境</h3></li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get update</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install default-jdk</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><h3 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装<code>hadoop</code></h3><ul>
<li>下载 hadoop</li>
</ul>
<p>清华镜像源：<a class="link"   href="https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/" >https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><code>wget https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-3.3.4/hadoop-3.3.4.tar.gz </code></p>
<ul>
<li><p>配置环境变量</p>
<p>将<code>Hadoop</code>文件解压并移动到 <code>/usr/local/hadoop</code> 文件夹下</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf hadoop-3.3.4.tar.gz</span><br><span class="line">sudo mv hadoop-3.3.4 /usr/local/hadoop</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在<code>terminal</code>中输入 <code>sudo vi ~/.bashrc</code> ，按 <strong>i</strong> 进入编辑模式：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">export HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">export HADOOP_INSTALL=$HADOOP_HOME</span><br><span class="line">export HADOOP_MAPRED_HOME=$HADOOP_HOME</span><br><span class="line">export HADOOP_COMMON_HOME=$HADOOP_HOME</span><br><span class="line">export HADOOP_HDFS_HOME=$HADOOP_HOME</span><br><span class="line">export YARN_HOME=$HADOOP_HOME</span><br><span class="line">export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin</span><br><span class="line">export HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_HOME/lib/native&quot;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../my_imgs/hadoop2.png"
                      alt="hadoop2"
                ></p>
</li>
<li><h3 id="修改Hadoop配置文件"><a href="#修改Hadoop配置文件" class="headerlink" title="修改Hadoop配置文件"></a>修改<code>Hadoop</code>配置文件</h3><p>打开 <code>/usr/local/hadoop/etc/hadoop/</code> 文件夹：</p>
<ul>
<li><p>配置 <code>hadoop-env.sh</code> 文件</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显式声明java路径</span></span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置<code>~/.bashrc</code></p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">#<span class="variable constant_">HADOOP</span> <span class="variable constant_">VARIABLES</span> <span class="variable constant_">START</span></span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">JAVA_HOME</span>=<span class="regexp">/usr/</span>lib/jvm/java</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">HADOOP_INSTALL</span>=<span class="regexp">/usr/</span>local/hadoop</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">PATH</span>=<span class="attr">$PATH</span>:$HADOOP_INSTALL/bin</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">PATH</span>=<span class="attr">$PATH</span>:$HADOOP_INSTALL/sbin</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">HADOOP_MAPRED_HOME</span>=$HADOOP_INSTALL</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">HADOOP_COMMON_HOME</span>=$HADOOP_INSTALL</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">HADOOP_HDFS_HOME</span>=$HADOOP_INSTALL</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">YARN_HOME</span>=$HADOOP_INSTALL</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">HADOOP_COMMON_LIB_NATIVE_DIR</span>=$HADOOP_INSTALL/lib/native</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">HADOOP_OPTS</span>=<span class="string">&quot;-Djava.library.path=$HADOOP_INSTALL/lib/native&quot;</span></span><br><span class="line">#<span class="variable constant_">HADOOP</span> <span class="variable constant_">VARIABLES</span> <span class="variable constant_">END</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>配置 <code>core-site.xml</code> 文件</p>
<p>在修改这个文件之前，我们需要使用超级用户创建一个目录，并给予<code>hadoop</code>该目录的权限：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">mkdir</span> -p /app/hadoop/tmp</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">chown</span> hadoop:hadoop /app/hadoop/tmp</span></span><br></pre></td></tr></table></figure></div>

<p>接下来切换回<code>hadoop</code>用户，修改配置文件，文件路径：<code>/usr/local/hadoop/etc/hadoop/core-site.xml</code>，使用 VI，将配置改为：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/app/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>A base for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:54310<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>The name of the default file system.  A URI whose</span><br><span class="line">  scheme and authority determine the FileSystem implementation.  The</span><br><span class="line">  uri&#x27;s scheme determines the config property (fs.SCHEME.impl) naming</span><br><span class="line">  the FileSystem implementation class.  The uri&#x27;s authority is used to</span><br><span class="line">  determine the host, port, etc. for a filesystem.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改<code>mapred-site.xml</code></p>
<p><code>vi  /usr/local/hadoop/etc/hadoop/mapred-site.xml</code></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.job.tracker<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost:54311<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>The host and port that the MapReduce job tracker runs</span><br><span class="line">  at.  If &quot;local&quot;, then jobs are run in-process as a single map</span><br><span class="line">  and reduce task.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>修改<code>hdfs-site.xml</code></p>
<p>在修改之前，需要切换回超级管理员账户，创建需要用到的目录</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">mkdir</span> -p /usr/local/hadoop_store/hdfs/namenode</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">mkdir</span> -p /usr/local/hadoop_store/hdfs/datanode</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">chown</span> -R hduser:hadoop /usr/local/hadoop_store</span></span><br></pre></td></tr></table></figure></div>

<p>然后切换回来<code>hadoop</code>用户，修改配置文件：<code>/usr/local/hadoop/etc/hadoop/hdfs-site.xml</code>，改为：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">  &lt;description&gt;Default block replication.</span><br><span class="line">  The actual number of replications can be specified when the file is created.</span><br><span class="line">  The default is used if replication is not specified in create time.</span><br><span class="line">  &lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">   &lt;value&gt;file:/usr/local/hadoop_store/hdfs/namenode&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">   &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">   &lt;value&gt;file:/usr/local/hadoop_store/hdfs/datanode&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>格式化<code>HDFS</code></p>
<p><code>hadoop namenode –format</code></p>
</li>
</ul>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../my_imgs/hadoop3.png"
                      alt="hadoop3"
                ></p>
<ul>
<li><p>启动<code>Hadoop</code></p>
<p>设置无密码登录</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line"></span><br><span class="line">chmod 755 ~/.ssh</span><br><span class="line"></span><br><span class="line">cd ~/.ssh</span><br><span class="line"></span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure></div>

<p>连接本地</p>
<p><code>ssh localhost</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../my_imgs/hadoop4.png"
                      alt="hadoop4"
                ></p>
<p>启动：</p>
<p><code> start-all.sh</code></p>
<p>查看服务：</p>
<p><code>jps</code></p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/../my_imgs/hadoop5.png"
                      alt="hadoop5"
                ></p>
]]></content>
      <categories>
        <category>笔记</category>
        <category>Linux</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
